<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[SideNavigation——今晚不加班😂]]></title>
      <url>/2017/09/22/SideNavigation%E2%80%94%E2%80%94%E4%BB%8A%E6%99%9A%E4%B8%8D%E5%8A%A0%E7%8F%AD%F0%9F%98%82/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;在 Android app 中，侧边栏的应用是非常普遍的，从 Google 的官方 UI 设计指南中可以看出这种设计对 UI || UED 的引导，不仅如此，Google 自家的应用也对侧边栏进行了广泛的实践，inbox gmail 就是其中之一。因此，你也可能遇到有一天你的 UI || UED  跑过来对你说我们 iOS 也支持一下 “侧边栏” 导航吧。如果你有这个需求又恰好看到这篇文章，那么恭喜你，本来可能需要加班的你可以解放了。<br><a id="more"></a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-710ab9f57c187cb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="image.png"></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;如上图，像这样的效果实现方式很多，我们项目中原来就有实现过，既然实现过，那么为什么还要去实现一遍呢？这就要从我苦逼的 iPad 适配之旅开始讲了，我们的项目是一个 OC + Swift + RN + H5 的一个混合项目，适配起来那个酸爽别提了，侧边是由 OC 写的老旧代码，在 iPad 的横竖屏适配上特别糟糕😰，于是我决定用 Swift 封装一个 SideNavigation 的轮子。为了满足需求这个轮子应该具备以下特点：</p>
<ol>
<li>横竖屏适配，满足 iPad 适配需求</li>
<li>支持 Swift &amp;&amp; OC 满足混编需求</li>
<li>用户可以通过向右或者向左滑动呼出侧边栏</li>
<li>用户还可以通过拖拽关闭侧边栏</li>
</ol>
<h6 id="接口要简单"><a href="#接口要简单" class="headerlink" title="接口要简单"></a>接口要简单</h6><p>&emsp;&emsp;把复杂留给自己，简单留给他人，好的接口大底应该如此。如：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="number">_</span> viewController: <span class="type">UIViewController</span>, <span class="keyword">left</span>: <span class="type">UIViewController</span>) </div><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="number">_</span> viewController: <span class="type">UIViewController</span>, <span class="keyword">right</span>: <span class="type">UIViewController</span>)</div></pre></td></tr></table></figure></p>
<p>由上可知，我们只需要通过初始化一个 SideMenuManager 就能实现你想要的侧边抽屉效果，实在是太方便了😂。</p>
<h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><p>&emsp;&emsp;<br>(1)  实现 UIViewControllerTransitioningDelegate<br>&emsp;&emsp; 我们可以通过 UIViewControllerTransitioningDelegate 来实现转场动画：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">presentationController</span><span class="params">(forPresented presented: UIViewController, presenting: UIViewController?, source: UIViewController)</span></span> -&gt; <span class="type">UIPresentationController</span>? &#123;</div><div class="line">    <span class="keyword">let</span> presentationController = <span class="type">PresentationController</span>(presentedViewController: presented, presenting: presenting)</div><div class="line">    presentationController.delegate = <span class="keyword">self</span></div><div class="line">    presentationController.direction = direction</div><div class="line">    <span class="keyword">self</span>.dismissInteractor = <span class="type">PercentDrivenInteractiveTransition</span>(<span class="keyword">self</span>.presentController, with: presentationController.dimmingView, present: <span class="literal">nil</span>, direction: <span class="keyword">self</span>.direction)</div><div class="line">    <span class="keyword">return</span> presentationController</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">animationController</span><span class="params">(forDismissed dismissed: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? &#123;</div><div class="line">    <span class="keyword">let</span> animator = <span class="type">AnimatedTransitioning</span>()</div><div class="line">    animator.direction = direction</div><div class="line">    animator.transitionType = .dismiss</div><div class="line">    <span class="keyword">return</span> animator</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">animationController</span><span class="params">(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? &#123;</div><div class="line">    <span class="keyword">let</span> animator = <span class="type">AnimatedTransitioning</span>()</div><div class="line">    animator.direction = direction</div><div class="line">    animator.transitionType = .present</div><div class="line">    <span class="keyword">return</span> animator</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">interactionControllerForDismissal</span><span class="params">(using animator: UIViewControllerAnimatedTransitioning)</span></span> -&gt; <span class="type">UIViewControllerInteractiveTransitioning</span>? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dismissInteractor.isInteractiveTransition ? <span class="keyword">self</span>.dismissInteractor : <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">interactionControllerForPresentation</span><span class="params">(using animator: UIViewControllerAnimatedTransitioning)</span></span> -&gt; <span class="type">UIViewControllerInteractiveTransitioning</span>? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.presentInteractor.isInteractiveTransition ? <span class="keyword">self</span>.presentInteractor : <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过使用 SideNavigation 我们可以知道，我们的侧边效果是通过转场来实现的，要达到侧边栏的效果，我们可以自定义转场动画，👆代码中的代理就是转场协议的实现，包括对 non-interactive 和 interactive 动画进行自定义实现。</p>
<p>（2）自定义 UIPresentationController<br>&emsp;&emsp; 在 <code>public func presentationController(forPresented presented: UIViewController, presenting: UIViewController?, source: UIViewController) -&gt; UIPresentationController?</code> 函数中我们需要返回一个指定的 <code>UIPresentationController</code>, 当然，我们这里需要对我们的 <code>UIPresentationController</code> 适当的做一些改造来满足我们的需求:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - Initializers</span></div><div class="line"> <span class="keyword">override</span> <span class="keyword">init</span>(presentedViewController: <span class="type">UIViewController</span>, presenting presentingViewController: <span class="type">UIViewController</span>?) &#123;</div><div class="line">     <span class="keyword">super</span>.<span class="keyword">init</span>(presentedViewController: presentedViewController, presenting: presentingViewController)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">override</span> <span class="keyword">var</span> frameOfPresentedViewInContainerView: <span class="type">CGRect</span> &#123;</div><div class="line">     <span class="keyword">var</span> frame: <span class="type">CGRect</span> = <span class="keyword">super</span>.frameOfPresentedViewInContainerView</div><div class="line">     <span class="keyword">switch</span> direction &#123;</div><div class="line">     <span class="keyword">case</span> .<span class="keyword">right</span>:</div><div class="line">         frame.origin.x = frame.size.width / <span class="number">3</span></div><div class="line">     <span class="keyword">default</span>:</div><div class="line">         <span class="keyword">break</span></div><div class="line">     &#125;</div><div class="line">     frame.size = size(forChildContentContainer: presentedViewController, withParentContainerSize: containerView!.bounds.size)</div><div class="line">     <span class="keyword">return</span> frame</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">containerViewWillLayoutSubviews</span><span class="params">()</span></span> &#123;</div><div class="line">     presentedView?.frame = frameOfPresentedViewInContainerView</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">(forChildContentContainer container: UIContentContainer, withParentContainerSize parentSize: CGSize)</span></span> -&gt; <span class="type">CGSize</span> &#123;</div><div class="line">     <span class="keyword">return</span> <span class="type">CGSize</span>(width: parentSize.width*(<span class="number">2.0</span>/<span class="number">3.0</span>), height: parentSize.height)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">presentationTransitionWillBegin</span><span class="params">()</span></span> &#123;</div><div class="line">     containerView?.insertSubview(dimmingView, at: <span class="number">0</span>)</div><div class="line">     <span class="type">NSLayoutConstraint</span>.activate(<span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"V:|[dimmingView]|"</span>, options: [], metrics: <span class="literal">nil</span>, views: [<span class="string">"dimmingView"</span>: dimmingView]))</div><div class="line">     <span class="type">NSLayoutConstraint</span>.activate(<span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">"H:|[dimmingView]|"</span>, options: [], metrics: <span class="literal">nil</span>, views: [<span class="string">"dimmingView"</span>: dimmingView]))</div><div class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> coordinator = presentedViewController.transitionCoordinator <span class="keyword">else</span> &#123;</div><div class="line">         dimmingView.alpha = <span class="number">1.0</span></div><div class="line">         <span class="keyword">return</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">     coordinator.animate(alongsideTransition: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">         <span class="keyword">self</span>.dimmingView.alpha = <span class="number">1.0</span></div><div class="line">     &#125;)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">dismissalTransitionWillBegin</span><span class="params">()</span></span> &#123;</div><div class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> coordinator = presentedViewController.transitionCoordinator <span class="keyword">else</span> &#123;</div><div class="line">         dimmingView.alpha = <span class="number">0.0</span></div><div class="line">         <span class="keyword">return</span></div><div class="line">     &#125;</div><div class="line"></div><div class="line">     coordinator.animate(alongsideTransition: &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">         <span class="keyword">self</span>.dimmingView.alpha = <span class="number">0.0</span></div><div class="line">     &#125;)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="built_in">lazy</span> <span class="keyword">var</span> dimmingView: <span class="type">UIView</span> = &#123;</div><div class="line">     <span class="keyword">let</span> dimming = <span class="type">UIView</span>()</div><div class="line">     dimming.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></div><div class="line">     dimming.backgroundColor = <span class="type">UIColor</span>(white: <span class="number">0.0</span>, alpha: <span class="number">0.5</span>)</div><div class="line">     dimming.alpha = <span class="number">0.0</span></div><div class="line">     <span class="keyword">let</span> recognizer = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(handleTap(recognizer:)))</div><div class="line">     dimming.addGestureRecognizer(recognizer)</div><div class="line">     <span class="keyword">return</span> dimming</div><div class="line"> &#125;()</div><div class="line"></div><div class="line"> <span class="meta">@objc</span> <span class="keyword">dynamic</span> <span class="function"><span class="keyword">func</span> <span class="title">handleTap</span><span class="params">(recognizer: UITapGestureRecognizer)</span></span> &#123;</div><div class="line">     presentingViewController.dismiss(animated: <span class="literal">true</span>)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在自定义的  <code>UIPresentationController</code> 的过程中，我们对 <code>presentedView</code> 的 <code>frame</code> 进行简单的更改，已达到我们的期望。从效果图中我们也看到，我们还需要一个 <code>dimmingView</code> 来实现半透明效果，这里我们还未它添加了一个手势以便于 <code>dismiss</code> 抽屉。 </p>
<p>（3）实现 UIViewControllerAnimatedTransitioning </p>
<p>&emsp;&emsp; <code>public func animationController(forDismissed dismissed: UIViewController) -&gt; UIViewControllerAnimatedTransitioning?</code> 需要返回一个 <code>UIViewControllerAnimatedTransitioning</code> 这里我们来初略的看一下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">transitionDuration</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class="type">TimeInterval</span> &#123;</div><div class="line">    <span class="keyword">return</span> kAnimationDuration</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> from = transitionContext.viewController(forKey: <span class="type">UITransitionContextViewControllerKey</span>.from)</div><div class="line">    <span class="keyword">let</span> to = transitionContext.viewController(forKey: <span class="type">UITransitionContextViewControllerKey</span>.to)</div><div class="line">    <span class="keyword">switch</span> transitionType &#123;</div><div class="line">    <span class="keyword">case</span> .present:</div><div class="line">        animatePresenting(<span class="keyword">in</span>: transitionContext, to: to!, from: from!)</div><div class="line">    <span class="keyword">case</span> .dismiss:</div><div class="line">        animateDismissing(<span class="keyword">in</span>: transitionContext, to: to!, from: from!)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">animatePresenting</span><span class="params">(<span class="keyword">in</span> transitionContext: UIViewControllerContextTransitioning, to: UIViewController, from: UIViewController)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> fromRect = transitionContext.initialFrame(<span class="keyword">for</span>: from)</div><div class="line">    <span class="keyword">var</span> toRect = fromRect</div><div class="line">    <span class="keyword">switch</span> direction &#123;</div><div class="line">    <span class="keyword">case</span> .<span class="keyword">left</span>:</div><div class="line">        toRect.origin.x = -toRect.width / <span class="number">3</span> * <span class="number">2</span> <span class="comment">// for the edge panGesture</span></div><div class="line">        <span class="keyword">if</span> #available(iOS <span class="number">11</span>, *) &#123;</div><div class="line">            <span class="comment">// it's maybe a bug of iOS 11, it should be checked some time</span></div><div class="line">            fromRect = <span class="type">CGRect</span>(x: fromRect.minX - (toRect.width / <span class="number">3</span>)/<span class="number">2</span>, y: fromRect.minY, width: fromRect.width, height: fromRect.height)</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">case</span> .<span class="keyword">right</span>:</div><div class="line">        toRect.origin.x = toRect.width / <span class="number">3</span> * <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> #available(iOS <span class="number">11</span>, *) &#123;</div><div class="line">            <span class="comment">// it's maybe a bug of iOS 11, it should be checked some time</span></div><div class="line">            fromRect = <span class="type">CGRect</span>(x: fromRect.minX + (toRect.width / <span class="number">3</span>)/<span class="number">2</span>, y: fromRect.minY, width: fromRect.width, height: fromRect.height)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    to.view.frame = toRect</div><div class="line">    transitionContext.containerView.addSubview(to.view)</div><div class="line">    <span class="type">UIView</span>.animate(withDuration: kAnimationDuration, animations: &#123;</div><div class="line">        to.view.frame = fromRect</div><div class="line">    &#125;) &#123; (<span class="number">_</span>) <span class="keyword">in</span></div><div class="line">        <span class="keyword">if</span> transitionContext.transitionWasCancelled &#123;</div><div class="line">            transitionContext.completeTransition(<span class="literal">false</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">animateDismissing</span><span class="params">(<span class="keyword">in</span> transitionContext: UIViewControllerContextTransitioning, to: UIViewController, from: UIViewController)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> fromRect = transitionContext.initialFrame(<span class="keyword">for</span>: from)</div><div class="line">    <span class="keyword">switch</span> direction &#123;</div><div class="line">    <span class="keyword">case</span> .<span class="keyword">left</span>:</div><div class="line">        fromRect.origin.x = -fromRect.width</div><div class="line">    <span class="keyword">case</span> .<span class="keyword">right</span>:</div><div class="line">        fromRect.origin.x = fromRect.width</div><div class="line">    &#125;</div><div class="line">    <span class="type">UIView</span>.animate(withDuration: kAnimationDuration, animations: &#123;</div><div class="line">        from.view.frame = fromRect</div><div class="line">    &#125;) &#123; (<span class="number">_</span>) <span class="keyword">in</span></div><div class="line">        <span class="keyword">if</span> transitionContext.transitionWasCancelled &#123;</div><div class="line">            transitionContext.completeTransition(<span class="literal">false</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            transitionContext.completeTransition(<span class="literal">true</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从  <code>animatePresenting</code>  以及 <code>animateDismissing</code> 我们可以清晰的看到，这里就是对转场这个过程的 <code>start</code> 到 <code>end</code> 过程的位置状态做一个约束，然后在辅以简单的动画。</p>
<p>（4）UIPercentDrivenInteractiveTransition 的继承<br>&emsp;&emsp; 还记得我们在第一步实现的 <code>func interactionControllerForDismissal(using animator: UIViewControllerAnimatedTransitioning) -&gt; UIViewControllerInteractiveTransitioning?</code>  &amp;&amp;  <code>func interactionControllerForPresentation(using animator: UIViewControllerAnimatedTransitioning) -&gt; UIViewControllerInteractiveTransitioning?</code>  这两个函数吗？我们的用户交互效果就是通过这两个函数来实现的，在这里我们对 <code>UIPercentDrivenInteractiveTransition</code> 进行自定义：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="number">_</span> viewController: <span class="type">UIViewController</span>, with view: <span class="type">UIView</span>?, present: <span class="type">UIViewController</span>?, direction: <span class="type">Direction</span>? = .<span class="keyword">left</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</div><div class="line">        <span class="keyword">self</span>.viewController = viewController</div><div class="line">        <span class="keyword">self</span>.direction = direction ?? .<span class="keyword">left</span></div><div class="line">        <span class="keyword">self</span>.presentViewController = present</div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.presentViewController != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">switch</span> <span class="keyword">self</span>.direction &#123;</div><div class="line">            <span class="keyword">case</span> .<span class="keyword">left</span>:</div><div class="line">                <span class="keyword">let</span> edgePanGesture = <span class="type">UIScreenEdgePanGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(onPan(sender:)))</div><div class="line">                edgePanGesture.edges = .<span class="keyword">left</span></div><div class="line">                edgePanGesture.delegate = <span class="keyword">self</span></div><div class="line">                <span class="keyword">self</span>.viewController.view.addGestureRecognizer(edgePanGesture)</div><div class="line">            <span class="keyword">case</span> .<span class="keyword">right</span>:</div><div class="line">                <span class="keyword">let</span> edgePanGesture = <span class="type">UIScreenEdgePanGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(onPan(sender:)))</div><div class="line">                edgePanGesture.edges = .<span class="keyword">right</span></div><div class="line">                edgePanGesture.delegate = <span class="keyword">self</span></div><div class="line">                <span class="keyword">self</span>.viewController.view.addGestureRecognizer(edgePanGesture)</div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> panGesture = <span class="type">UIPanGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(onPan(sender:)))</div><div class="line">            view?.addGestureRecognizer(panGesture)</div><div class="line">            <span class="keyword">let</span> dismissPanGesture = <span class="type">UIPanGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(onPan(sender:)))</div><div class="line">            <span class="keyword">self</span>.viewController.view.addGestureRecognizer(dismissPanGesture)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gestureRecognizerShouldBegin</span><span class="params">(<span class="number">_</span> gestureRecognizer: UIGestureRecognizer)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">/// to avoid the interactivePopGestureRecognizer of UINavigationController</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> nav = viewController <span class="keyword">as</span>? <span class="type">UINavigationController</span> &#123;</div><div class="line">            <span class="keyword">return</span> nav.viewControllers.<span class="built_in">count</span> &lt; <span class="number">2</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">onPan</span><span class="params">(sender: UIPanGestureRecognizer)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span>  translation = sender.translation(<span class="keyword">in</span>: sender.view?.superview)</div><div class="line">        <span class="keyword">switch</span> sender.state &#123;</div><div class="line">        <span class="keyword">case</span> .began:</div><div class="line">            <span class="keyword">self</span>.isInteractiveTransition = <span class="literal">true</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.presentViewController != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">self</span>.viewController.present(<span class="keyword">self</span>.presentViewController!, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">self</span>.viewController.dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">case</span> .changed:</div><div class="line">            <span class="keyword">let</span> screenWidth = -<span class="type">UIScreen</span>.main.bounds.size.width</div><div class="line">            <span class="keyword">var</span> dragAmount = <span class="keyword">self</span>.presentViewController == <span class="literal">nil</span> ? screenWidth : -screenWidth</div><div class="line">            <span class="keyword">switch</span> direction &#123;</div><div class="line">            <span class="keyword">case</span> .<span class="keyword">left</span>:</div><div class="line">                dragAmount = <span class="keyword">self</span>.presentViewController == <span class="literal">nil</span> ? screenWidth : -screenWidth</div><div class="line">            <span class="keyword">case</span> .<span class="keyword">right</span>:</div><div class="line">                dragAmount = <span class="keyword">self</span>.presentViewController != <span class="literal">nil</span> ? screenWidth : -screenWidth</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">let</span> threshold: <span class="type">CGFloat</span> = <span class="number">0.20</span></div><div class="line">            <span class="keyword">var</span> percent = translation.x / dragAmount</div><div class="line">            percent = <span class="built_in">max</span>(percent, <span class="number">0.0</span>)</div><div class="line">            percent = <span class="built_in">min</span>(percent, <span class="number">1.0</span>)</div><div class="line">            update(percent)</div><div class="line">            <span class="keyword">self</span>.shouldComplete = percent &gt; threshold</div><div class="line">        <span class="keyword">case</span> .cancelled, .ended:</div><div class="line">            <span class="keyword">self</span>.isInteractiveTransition = <span class="literal">false</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.shouldComplete == <span class="literal">false</span> || sender.state == .cancelled &#123;</div><div class="line">                cancel()</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                finish()</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">``` </div><div class="line">对 `<span class="type">UIPercentDrivenInteractiveTransition</span>` 自定义的主要目的是对 转场动效的更新过程进行控制：</div><div class="line">```swift </div><div class="line">    <span class="comment">// These methods should be called by the gesture recognizer or some other logic</span></div><div class="line">    <span class="comment">// to drive the interaction. This style of interaction controller should only be</span></div><div class="line">    <span class="comment">// used with an animator that implements a CA style transition in the animator's</span></div><div class="line">    <span class="comment">// animateTransition: method. If this type of interaction controller is</span></div><div class="line">    <span class="comment">// specified, the animateTransition: method must ensure to call the</span></div><div class="line">    <span class="comment">// UIViewControllerTransitionParameters completeTransition: method. The other</span></div><div class="line">    <span class="comment">// interactive methods on UIViewControllerContextTransitioning should NOT be</span></div><div class="line">    <span class="comment">// called. If there is an interruptible animator, these methods will either scrub or continue </span></div><div class="line">    <span class="comment">// the transition in the forward or reverse directions.</span></div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(<span class="number">_</span> percentComplete: CGFloat)</span></span></div></pre></td></tr></table></figure>
<p>正是如此，我们在  <code>UIPercentDrivenInteractiveTransition</code> 的自定义过程中，通过对 中间视图和侧边视图添加手势来控制转场 <code>update</code> 的进度。<br>&emsp;&emsp;看看项目中的使用效果：<br><img src="http://upload-images.jianshu.io/upload_images/121208-1eaeac71cacb5879.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Simulator Screen Shot - iPhone 8 - 2017-09-22 at 09.45.13.png"><img src="http://upload-images.jianshu.io/upload_images/121208-730824aa958d22ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="Simulator Screen Shot - iPhone X - 2017-09-22 at 10.15.15.png"></p>
<p><img src="https://thumbs.gfycat.com/MagnificentWhichFlyinglemur-size_restricted.gif" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;实现一个简易的侧边抽屉效果还是很简单的，我们通过实现专场协议，自定义转场动画，添加滑动手势，设置转场始末位置状态，就可以轻松搞定侧边栏。</p>
<p><a href="https://github.com/CNKCQ/SideNavigation.git" target="_blank" rel="external">Project</a></p>
<p>水平有限，如有疏漏，望指正<br>欢迎交流，欢迎 star  <a href="https://github.com/CNKCQ" target="_blank" rel="external">CNKCQ</a><br>遗人🌹，手有余香      <a href="http://wangchenquan.com/" target="_blank" rel="external">blog</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Menu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacBook——如何快速配置 iOS 开发环境]]></title>
      <url>/2017/09/04/MacBook%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE%20iOS%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> &emsp;&emsp;作为一名开发者，我相信你对开发环境的配置并不陌生，无论你是 J2EE、 Android 还是 iOS 开发者，拿到新电脑后第一件事情也就是去配置开发环境。如果你是一名开发老司机，你可能会熟练的配置好开发环境并迅速的就能进行开发，但对于 freshman 来说这个过程就有点漫长或者说是相当痛苦的。我们都是比较懒的，这么繁杂的配置，我们为什么不可以用一个脚本让他自动执行呢？<br><img src="http://upload-images.jianshu.io/upload_images/121208-bbe2ff6a4bc28e5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550" alt="start work"></p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>  &emsp;&emsp;作为Mac 上有很多激动人心的工具，我们会时常去收集，并在不断的尝试去更新自己的开发工具库。如果你不是独立开发者，那么也就意味着你有一个团队，为了协同工作，我们通常也会在团队中形成一套统一的开发工具集。因此我们可以在 git 上创建一个工程去管理我们的开发环境。那么就让我们简单的来完成一个这样的项目吧。做为 iOS 开发者，去 App store 下载并安装 Xcode，这一步不可避免👻，紧接着，安装 Xcode command line tools，运行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div></pre></td></tr></table></figure>
<p>这一步将完成  Xcode command line tools 的安装。本工程主要通过 fabric + shell 实现脚本自动化，所以我们还需安装 fabic 环境:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo easy_install -U pip</div><div class="line">sudo pip install Fabric -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</div></pre></td></tr></table></figure>
<p>根据这行命令的的指引，我们将成功安装 Fabric。看到这里，也许你会问，Fabric 是嘛玩意，对我们有什么帮助？</p>
<h4 id="Fabric"><a href="#Fabric" class="headerlink" title="Fabric"></a><a href="http://www.fabfile.org/index.html" target="_blank" rel="external">Fabric</a></h4><p>   &emsp;&emsp;作为Fabirc 是基于 python 实现的 SSH 命令行工具, 在自动化部署领域有着非常广泛的应用。<br>  那么怎么使用呢？在默认情况下使用 Fabric 我们需要在跟目录下创建 fabfile.py 入口文件，然后我们就可以在这个文件里进行脚本编写了。在文件开头我们首先导入我们所需要使用的 Fabric 库：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">from</span> fabric.colors <span class="keyword">import</span> blue, cyan, green, magenta, red, yellow</div><div class="line"><span class="keyword">from</span> fabric.decorators <span class="keyword">import</span> task</div><div class="line"><span class="keyword">from</span> fabric.operations <span class="keyword">import</span> local</div><div class="line"><span class="keyword">from</span> fabric.state <span class="keyword">import</span> env</div><div class="line"><span class="keyword">from</span> fabric.utils <span class="keyword">import</span> puts</div></pre></td></tr></table></figure>
<p>这里我们队 Fabric 导入的接口进行简要的说明：</p>
<table>
<thead>
<tr>
<th>api</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>colors</td>
<td>需要的颜色选定</td>
</tr>
<tr>
<td>local</td>
<td>配合 Shell 执行本地命令</td>
</tr>
<tr>
<td>env</td>
<td>fabfile 的全局参数定义</td>
</tr>
<tr>
<td>puts</td>
<td>打印相当于 Swift 中的 print 函数</td>
</tr>
<tr>
<td>task</td>
<td>被 @task 修饰的函数可以用 fab command 调用</td>
</tr>
</tbody>
</table>
<p>了解 Fabric 后我们来做一个 help 命令：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ============</span></div><div class="line"><span class="comment"># =   Help   =</span></div><div class="line"><span class="comment"># ============</span></div><div class="line"><span class="meta">@task(default=True, alias='help')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">""" look up the help doc """</span></div><div class="line">    puts(<span class="string">'*'</span> * <span class="number">60</span>)</div><div class="line">    puts(<span class="string">'*  '</span> + cyan(<span class="string">'  Fabric helps  '</span>.center(<span class="number">58</span>, <span class="string">'='</span>)) )</div><div class="line">    puts(<span class="string">'*'</span> + <span class="string">' '</span> * <span class="number">58</span> )</div><div class="line">    puts(<span class="string">'*'</span> + green(<span class="string">'  lookup all the Commands: fab -l'</span>.ljust(<span class="number">64</span>)))</div><div class="line">    puts(<span class="string">'*'</span> + green(<span class="string">'  lookup the detail of a specific command: fab -d command'</span>.ljust(<span class="number">64</span>)) )</div><div class="line">    puts(<span class="string">'*'</span> + yellow(<span class="string">'  execute a command with para: fab command: para'</span>.ljust(<span class="number">70</span>)))</div><div class="line">    puts(<span class="string">'*'</span> + <span class="string">' '</span> * <span class="number">58</span> )</div><div class="line">    puts(<span class="string">'*'</span> * <span class="number">60</span>)</div></pre></td></tr></table></figure>
<p>接下来我们来看看这个 help 命令的运行效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-db7ad4635367c85d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550" alt="command-help"><br>这是一个好的开始。</p>
<h4 id="softwares"><a href="#softwares" class="headerlink" title="softwares"></a>softwares</h4><p>  &emsp;&emsp;作为我们知道  fabric + shell 的简单使用可以实现一个自动化脚本，那么我们到底要用这个脚本安装哪些 software 呢？其实这个是因人而异的，这里我简单罗列一下我所使用的一些工具，您如果有更好的工具，请推荐给我：</p>
<ol>
<li><a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a><br> &emsp;&emsp;作为主流的  Linux 都有包管理器， Red hat 有 yum，Ubuntu 有 apt-get，但不好意思，Mac OS 没有这玩意，<a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a> —— Mac OS 缺失的软件包管理器，那么它 能干什么呢? 当然是管理 Mac OS 上的软件包。比如说我想安装 wget ：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install wget</div></pre></td></tr></table></figure>
<p>想卸载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew uninstall wget</div></pre></td></tr></table></figure>
<p>我们可以看到有了 Homebrew ，我们可以轻松的管理这些软件包。</p>
<ol>
<li><a href="http://ohmyz.sh/" target="_blank" rel="external">Oh My ZSH</a><br>&emsp;&emsp;其实 OS X 默认的 bash 已经非常强大了，但是你绝不会拒绝更优秀的 ZSH 。关于为什么使用 ZSH ，请移步 <a href="http://shanker.blog.51cto.com/1189689/1765036" target="_blank" rel="external">使用zsh的十大优点</a> 。由于 ZSH 的配置实在太复杂了，于是就出现了 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">Oh My ZSH</a> , 有了它，我们可以轻松的配置我们的 zsh 了：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</div></pre></td></tr></table></figure>
<ol>
<li><a href="https://cocoapods.org/" target="_blank" rel="external">CocoaPods</a><br>&emsp;&emsp; CocoaPods ，对于大家来说，我想并不陌生，它经常能帮助你快速的管理你的三方开源库，包括 <code>install</code>、<code>update</code> 等操作。 因此 CocoaPods 也是我们开发中必不可少的一个工具：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods</div></pre></td></tr></table></figure>
<p>……<br>常用的软件，我想我就不一一列举了，大家都有自己的习惯，和常用的软件。</p>
<h4 id="脚本化"><a href="#脚本化" class="headerlink" title="脚本化"></a>脚本化</h4><p>&emsp;&emsp;我们定义一个 <code>install</code>  函数，并将我们所要安装的软件通过脚本来顺序安装 ，并用 <code>@task</code> 标记：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""install the group of software, example: fab install:ios"""</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'/usr/local/bin/brew'</span>):</div><div class="line">    puts(green(<span class="string">'install Homebrew'</span>))</div><div class="line">    local(<span class="string">'ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'</span>)</div><div class="line">puts(green(<span class="string">'install  proxy'</span>))</div><div class="line">local(<span class="string">'brew install proxychains-ng'</span>)</div><div class="line">local(<span class="string">'sed -i "" "s/socks4[[:space:]][[:space:]]127.0.0.1[[:space:]]9050/socks5  127.0.0.1 1086/g" /usr/local/etc/proxychains.conf'</span>)</div><div class="line">local(<span class="string">'brew install bash-completion ruby tree'</span>)</div><div class="line">local(<span class="string">'brew link --overwrite ruby'</span>)</div><div class="line">puts(green(<span class="string">'config RubyGems'</span>))</div><div class="line">local(<span class="string">'gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/'</span>)</div><div class="line">local(<span class="string">'gem sources -l'</span>)</div><div class="line">puts(green(<span class="string">'install BearyChat, GitHub Desktop, Google Chrome, ShadowsocksX-NG'</span>))</div><div class="line">local(<span class="string">'brew cask install bearychat github-desktop google-chrome shadowsocksx-ng'</span>)</div><div class="line">puts(green(<span class="string">'install Atom, Charles, Dash'</span>))</div><div class="line">local(<span class="string">'brew cask install atom charles dash'</span>)</div><div class="line">puts(green(<span class="string">'install CocoaPods'</span>))</div><div class="line">local(<span class="string">'sudo gem install cocoapods'</span>)</div><div class="line">puts(green(<span class="string">'install Carthage, SwiftLint'</span>))</div><div class="line">local(<span class="string">'brew install carthage swiftlint'</span>)</div><div class="line">puts(green(<span class="string">'install fastlane'</span>))</div><div class="line">local(<span class="string">'sudo gem install fastlane -NV'</span>)</div><div class="line">local(<span class="string">'brew cleanup'</span>)</div><div class="line">local(<span class="string">'brew cask cleanup'</span>)</div><div class="line">local(<span class="string">'sudo gem clean'</span>)</div></pre></td></tr></table></figure>
<p>如上代码，会逐行执行，等这段脚本执行完，这些软件也就安装好了。<br>同理，我们还可以定义一个用于软件更新的函数 <code>update</code> ：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(proxy=True, pypi_option=env.pypi_option)</span>:</span></div><div class="line">    <span class="string">"""update the tools to the latest version"""</span></div><div class="line">    puts(green(<span class="string">'update Homebrew'</span>))</div><div class="line">    local(<span class="string">'brew upgrade'</span>)</div><div class="line">    local(<span class="string">'brew cleanup'</span>)</div><div class="line">    puts(green(<span class="string">'update pip, Pylint, Transifex Command-Line Tool, virtualenvwrapper, twine, Fabric'</span>))  <span class="comment"># https://github.com/Homebrew/legacy-homebrew/issues/25752</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        local(<span class="string">'sudo -H pip3 install -U pip pylint transifex-client twine virtualenvwrapper&#123;&#125;'</span>.format(pypi_option))</div><div class="line">    <span class="keyword">except</span> Exception:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    local(<span class="string">'sudo -H pip2 install -U pip&#123;&#125;'</span>.format(pypi_option))</div><div class="line">    local(<span class="string">'sudo -H pip install -U --user Fabric&#123;&#125;'</span>.format(pypi_option))  <span class="comment"># https://github.com/pypa/pip/issues/3165</span></div><div class="line">    puts(green(<span class="string">'update RubyGems'</span>))</div><div class="line">    local(<span class="string">'sudo gem update'</span>)</div><div class="line">    local(<span class="string">'sudo gem clean'</span>)</div></pre></td></tr></table></figure>
<p>这样，我们就可以通过脚本定期更新我们的软件了。</p>
<p>水平有限，如有疏漏，望指正<br>欢迎交流，欢迎 star  <a href="https://github.com/CNKCQ" target="_blank" rel="external">CNKCQ</a><br>遗人🌹，手有余香      <a href="http://wangchenquan.com/" target="_blank" rel="external">blog</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 11 ——迟来的 NFC]]></title>
      <url>/2017/09/01/iOS%2011%20%E2%80%94%E2%80%94%E8%BF%9F%E6%9D%A5%E7%9A%84%20NFC/</url>
      <content type="html"><![CDATA[<p>  </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  NFC 这个词已经并不陌生了，前一段时间北京地铁支持 NFC 支付一时成为霸占头条的热点。其实在 90 年代末到 2000 年初，二维码和 NFC 就已经相继诞生，由于二维码成本低廉，技术门槛相对较低，因此，二维码迅速抢占了移动支付的市场，但 NFC 的发展并未因此停止。在 Android 端的 NFC 发展已经非常迅猛了，可惜 Apple 迟迟为开放接口，在今年的 WWDC 上，苹果宣布开放其 NFC 接口 <a href="https://developer.apple.com/documentation/corenfc" target="_blank" rel="external"> CoreNFC</a>, 这为以后 NFC 的应用提供了更多的可能。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>  如果你对 NFC 这项技术还比较陌生，那么这里科普一下，NFC（Near Field Communication）近场通信，当两个设备相互靠近时能进行信息交流。许多企业讲 NFC 芯片放到卡片里，用带有 NFC   芯片的卡片来授予权限将允许谁有权限，比如说进出入公司。Apple CoreNFC 目前支持的格式有限，NFC 数据交换格式或 NDEF（通常用于当今市场上的大多数平板电脑和手机），比如 Apple Pay 。</p>
<h2 id="CoreNFC-Demo"><a href="#CoreNFC-Demo" class="headerlink" title="CoreNFC Demo"></a>CoreNFC Demo</h2><p>  这里我们通过一个简单的实例程序来演示怎么使用 CoreNFC，这个程序可以用来读取存储在卡片上 NDEF 格式的信息。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-cec7ca6804a7f911.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="working-scanner.png"></p>
<p>为此，我使用 Arduino Uno 与 Adafruit PN532 Shield 配对，将其发送到样品 NDEF 格式的卡上。 如果你不具备这些东西，或者根本不想在这样的硬件上投入时间和金钱，请尝试找一张带有信息的预格式化卡。 本文中，我不会演示 NFC 格式化以及如何把数据存储到 NDEF 卡 中。</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>  打开 Xcode 9 创建一个简单的 Swift 工程。使用 Storyboard 创建简单的页面：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-8c47685e193eed81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p>
<p>ViewController 如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> messageLabel: <span class="type">UILabel</span>!</div><div class="line"> </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">scanPressed</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="comment">// this is our newly created IBAction</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Entitlements-amp-Privacy"><a href="#Entitlements-amp-Privacy" class="headerlink" title="Entitlements &amp; Privacy"></a>Entitlements &amp; Privacy</h2><p>  我们的 app 要使用 NFC 必须进行应用授权：前提是你得有一个有效 Apple id （交过保护费的). 进行应用程序授权和隐私设置，打开<a href="https://developer.apple.com/" target="_blank" rel="external">developer.apple.com</a>。 登录你的帐户，创建一个证书 —— 注册一个新的 APP ID。应用说明应该要支持 NFC 点击下一步，确保你的确认页面如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-8fa7a430ec5fd4cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p>
<p>然后再创建  provisioning profile ：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-638cc3dabbb815c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p>
<p>这一步完成了，在我们刚创建的项目中导入 证书和描述文件，完成之后呢，我们还需进行 Info.plist 配置 Privacy：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-db5efc3625e73429.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""></p>
<p>至此，我们的开始工作就完成了。👇我们进入 coding 阶段。</p>
<h2 id="Core-NFC"><a href="#Core-NFC" class="headerlink" title="Core NFC"></a>Core NFC</h2><p>  要实现 NFC 功能，我们得接入 Core NFC framework：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> CoreNFC</div></pre></td></tr></table></figure>
<p>目前为止，iOS模拟器尚未支持 CoreNFC。 这意味着如你尝试导入CoreNFC，会收到一条错误，表示没有名为 CoreNFC 的模块。 遇到这种情况，请选择你的 iPhone 或  Generic iOS Device。接下来我们实现 NFCNDEFReaderSessionDelegate 协议：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> CoreNFC </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">NFCNDEFReaderSessionDelegate</span> </span>&#123; </div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> messageLabel: <span class="type">UILabel</span>!</div><div class="line">    <span class="keyword">var</span> nfcSession: <span class="type">NFCNDEFReaderSession</span>?</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">scanPressed</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readerSession</span><span class="params">(<span class="number">_</span> session: NFCNDEFReaderSession, didInvalidateWithError error: Error)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"The session was invalidated: <span class="subst">\(error.localizedDescription)</span>"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readerSession</span><span class="params">(<span class="number">_</span> session: NFCNDEFReaderSession, didDetectNDEFs messages: [NFCNDEFMessage])</span></span> &#123;</div><div class="line">        <span class="comment">// Parse the card's information</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中两个 readerSession 函数会分别告诉我们 NFC 会话成功或失败，成功后则返回 NFCNDEFMessage 格式的通信数据，失败后会返回 error 信息。<br>  当然，我们首先还需要初始化 NFCNDEFReaderSession 并开启 NFC 监听。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">scanPressed</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">    nfcSession = <span class="type">NFCNDEFReaderSession</span>.<span class="keyword">init</span>(delegate: <span class="keyword">self</span>, queue: <span class="literal">nil</span>, invalidateAfterFirstRead: <span class="literal">true</span>)</div><div class="line">    nfcSession?.begin()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行程序，看看：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-c8d352a51aaf5e5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>
<p>如果提示 Session is invalidated unexpectedly ，那么请仔细核对 证书、描述文件以及 Privacy 设置是否正确。<br>这个过程并不难，简单几步就能搞定，下面我们来看看怎么解析获取到的 message 。</p>
<h2 id="解析-Message"><a href="#解析-Message" class="headerlink" title="解析 Message"></a>解析 Message</h2><p>  首先，让我们来看一下这个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func readerSession(_ session: NFCNDEFReaderSession, didDetectNDEFs messages: [NFCNDEFMessage])</div></pre></td></tr></table></figure></p>
<p>让我们来看看每一个 message 对象包含了哪些信息：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(messages[<span class="number">0</span>])</div></pre></td></tr></table></figure>
<p>我们可以看到：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">( // Payload one (There's only one payload in this card)</div><div class="line">    <span class="string">"TNF=1, /* Type Name Format */</span></div><div class="line"><span class="string">    Payload Type=&lt;55&gt;,</span></div><div class="line"><span class="string">    Payload ID=&lt;&gt;,</span></div><div class="line">    Payload=&lt;0048656c 6c6f21&gt;" /* What we're really interested in */</div><div class="line">)</div></pre></td></tr></table></figure>
<p>根据打印的结果我们可以看出：<br>. messages 是一个 NFCNDEFMessages  对象的数组。<br>. NFCNDEFMessage 有一个 NFCNDEFPayload 对象数组 records<br>然后我们再来看看每一个 payload 又包含了哪些信息：</p>
<ol>
<li>identifier.</li>
<li>type.</li>
<li>typeNameFormat. </li>
<li>payload.</li>
</ol>
<p>这里其实我们只关心 payload 。好了，看看如何解析 records 吧。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readerSession</span><span class="params">(<span class="number">_</span> session: NFCNDEFReaderSession, didDetectNDEFs messages: [NFCNDEFMessage])</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> payload <span class="keyword">in</span> messages[<span class="number">0</span>].records &#123;</div><div class="line">        result += <span class="type">String</span>.<span class="keyword">init</span>(data: payload.payload.advanced(by: <span class="number">3</span>), encoding: .utf8)! <span class="comment">// 1</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        <span class="keyword">self</span>.messageLabel.text = result</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来看看最终的效果：</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/121208-8afdb4462796a9e9.gif?imageMogr2/auto-orient/strip" alt="nice result"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.appcoda.com/corenfc-introduction/" target="_blank" rel="external">Working with CoreNFC in iOS 11
</a></p>
<p>水平有限，如有疏漏，望指正<br>欢迎交流，欢迎 star  <a href="https://github.com/CNKCQ" target="_blank" rel="external">CNKCQ</a><br>遗人🌹，手有余香      <a href="http://wangchenquan.com/" target="_blank" rel="external">blog</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> NFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xcode 9 —进阶的 iOS Simulator]]></title>
      <url>/2017/08/15/Xcode%209%20%E2%80%94%E8%BF%9B%E9%98%B6%E7%9A%84%20iOS%20Simulator/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   iOS Simulator 是 iOS 开发过程中不可或缺的一部分，我平时工作中也有很大一部分时间在使用 iOS Simulator， 相比于 Android ，iOS Simulator 具有启动时间快，运行效率高等显著的特点。 因此，用好 iOS Simulator 对于提高我们的开发效率是有很大帮助的. Xcode 9 中，有一大堆新特新等你来撩！！</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>1、 在 Xcode 的全屏模式下使用 Simulator</p>
<p>    如果你用的是 13 寸的电脑，那么 Xcode 的全屏模式你应该早已习惯，其实即使是配有显示器，我还是习惯在 Xcode 的全屏模式下开发😎。很可惜的是不能在 Xcode 的全屏模式下使用 Simulator, 自 Xcode 9b3 以后，这个问题便不存在了：</p>
<p><img src="https://thumbs.gfycat.com/SlimyGrouchyGoldenmantledgroundsquirrel-size_restricted.gif" alt=""></p>
<p>这个功能并不是对所有人默认开放的，如果不幸你的 Xcode 没有默认开启这个功能也不要灰心，我们可以通过打开 Apple Internal menu 来启用这个功能，通过 Apple Internal menu  你能挖掘出 Simulator 的更多新特性。那么问题来了，怎么开启  Apple Internal menu 呢？首先，在更目录里创建 AppleInternal 文件夹，然后重启 Simulator:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/121208-cc84bf762415541a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="internal-menu.png"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/</div><div class="line">sudo mkdir /AppleInternal</div></pre></td></tr></table></figure>
<p>重启 Simulator 后就可以看到 internal 选项 ☝️<br>再次重申，你需要下载 Xcode 9b3 或更新的版本才行</p>
<p>2、同时打开多个模拟器</p>
<p>还记以前我们在不同尺寸的手机上去适配吗？通常情况下，我们通过 Storyboard 可以直观的看到 View 在不同尺寸设备上的形态，然而纯 Code 码出的界面就得多次启动不同的模拟器来进行可视化调试了。作为开发者，你肯定也想过，要是能同时启动多个模拟器多好，那么很高兴的告诉你，在 Xcode 9 中这已不再是问题了。</p>
<p><img src="https://thumbs.gfycat.com/FortunateCrazyKiwi-size_restricted.gif" alt=""></p>
<p>3、拖动放大或缩小 Simulator</p>
<p>在 Xcode 9 之前， 我们需要通过 command + 1、2、3、4 来对 Simulator 的大小进行调整，Xcode 9 以后就不用这么麻烦，我们可以通过拖拽来控制模拟器的大小了。如果您有多个模拟器打开，这是非常有用的一些细节，它可以帮助你有效地组织工作空间。</p>
<p><img src="https://thumbs.gfycat.com/InconsequentialGreatInsect-size_restricted.gif" alt=""></p>
<p>4、Simulator 屏幕捕捉</p>
<p>在 Apple 官方的 “What’s new”  Xcode 9 文档中，苹果声称现在可以录制模拟器屏幕的视频。 其实这并不新鲜，即使在旧版本中我们也可以通过 simctl 实现这样的功能。 您可以从界面启用视频录制（除了iOS 11中的内置屏幕录制）。</p>
<p><img src="https://thumbs.gfycat.com/GrandPiercingCreature-size_restricted.gif" alt=""></p>
<p>执行 command 的命令，就可以得到我们想要录制的视频了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun simctl io booted recordVideo --type=mp4 &lt;PATH TO VIDEO FILE&gt;</div></pre></td></tr></table></figure>
<p>booted —— 即是 simctl 当前选中的模拟器，如果当前有多个模拟器，那么选中的活动的 Simulator 为准。</p>
<p>5、Finder 和 Simulator 共享文件</p>
<p>现在，Simulator 具有 Finder 扩展，我们可以直接从 Finder 窗口共享文件给 Simulator 。</p>
<p><img src="https://thumbs.gfycat.com/FondIndelibleCaudata-size_restricted.gif" alt=""></p>
<p>当然，如果你使用的是旧版本的 Xcode ，我们也可以使用 simctl 命令来进行类似操作：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun simctl addmedia booted &lt;PATH TO MEDIA FILE&gt;</div></pre></td></tr></table></figure>
<p>这个功能太棒了，毕竟，我更喜欢通过拖拽来实现 Simulator 和 Finder 的文件共享。</p>
<p>6、 通过 Simulator 打开 URLs<br>通过 simctl 也可以实现 Simulator 打开 URLs， 所以你也可以在旧的模拟器上打开自定义的 URL。</p>
<p><img src="https://thumbs.gfycat.com/LimpApprehensiveIguana-size_restricted.gif" alt=""></p>
<p>执行下面的 shell 命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun simctl openurl booted &lt;URL&gt;</div></pre></td></tr></table></figure>
<p>Apple 官方文档 <a href="https://developer.apple.com/library/content/featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html" target="_blank" rel="external">check out the documentation</a></p>
<p>7、快速打开 app 的文件系统</p>
<p>通过 simctl 你只需要简单的执行下面一句命令，你就能获取 app 的文件系统，但是，你得知道 bundle identifier：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun simctl get_app_container booted &lt;APPS BUNDLE ID&gt;</div></pre></td></tr></table></figure>
<p>或者您可以通过 open 命令在 Finder 中快速打开目标文件夹：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open `xcrun simctl get_app_container booted &lt;APPS BUNDLE ID&gt;` -a Finder</div></pre></td></tr></table></figure>
<p>8、通过 Command 打开 Simulator 中的 APP<br>有了 simctl ，你可以通过 Command 启动 Simulator 中的 app, 或者做一些环境变量的控制，这在自动化测试中是非常重要的。</p>
<p><img src="https://thumbs.gfycat.com/QuickBoldGalago-size_restricted.gif" alt=""></p>
<p>你只要使用一下命令即可实现：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun simctl launch --console booted &lt;BUNDLE ID&gt; &lt;YOUR ARGUMENTS&gt;</div></pre></td></tr></table></figure>
<p>9、 通过 Bundle ID 获取 app 的 info 信息</p>
<p>有时候，我们想获得 app 的 更多的信息，可以通过 simctl appinfo 获得以下格式的信息：</p>
<figure class="highlight plist"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   ApplicationType = User;</div><div class="line">   Bundle = <span class="tag">&lt;<span class="name">PATH</span> <span class="attr">TO</span> <span class="attr">APP</span> <span class="attr">FILE</span>&gt;</span>;</div><div class="line">   BundleContainer = <span class="tag">&lt;<span class="name">PATH</span> <span class="attr">TO</span> <span class="attr">FOLDER</span> <span class="attr">WITH</span> <span class="attr">APP</span> <span class="attr">FILE</span>&gt;</span>;</div><div class="line">   CFBundleDisplayName = TestiOSApp;</div><div class="line">   CFBundleExecutable = TestiOSApp;</div><div class="line">   CFBundleIdentifier = "com.ahmed.app.TestiOSApp";</div><div class="line">   CFBundleName = TestiOSApp;</div><div class="line">   CFBundleVersion = 1;</div><div class="line">   DataContainer = <span class="tag">&lt;<span class="name">PATH</span> <span class="attr">TO</span> <span class="attr">YOUR</span> <span class="attr">DATA</span>&gt;</span>;</div><div class="line">   GroupContainers =     &#123;</div><div class="line">   &#125;;</div><div class="line">   Path = <span class="tag">&lt;<span class="name">PATH</span> <span class="attr">TO</span> <span class="attr">APP</span> <span class="attr">FILE</span>&gt;</span>;</div><div class="line">   SBAppTags =     (</div><div class="line">   );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行以下命令你就能获取以上格式的信息：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun simctl appinfo booted &lt;BUNDLE ID&gt;</div></pre></td></tr></table></figure>
<p>最后……</p>
<p>iOS Simulator 功能强大，是我们开发中必备的神器，当你掌握了它的相关细节以及使用技巧可以极大的提高你的开发效率。当然，作为一个有追求的 iOS 工程师，你更应该去挖掘它那些鲜为人知的功能，然后记得要告诉我哟😊！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.appcoda.com/ios-simulator-tips-tricks/" target="_blank" rel="external">iOS Simulator on Steroids: Tips &amp; Tricks in Xcode 9</a></p>
<p>水平有限，如有疏漏，望指正<br>欢迎交流，欢迎 star  <a href="https://github.com/CNKCQ" target="_blank" rel="external">github</a><br>遗人🌹，手有余香</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UIKit 扩展系列之 UIView]]></title>
      <url>/2017/08/13/UIKit%20%E6%89%A9%E5%B1%95%E7%B3%BB%E5%88%97%E4%B9%8B%20UIView/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  对 iOS 熟悉的同学应该都知道，在开发的过程中，我们经常会创建一些扩展来封装一些常用的代码块以便我们快速开发，我也不例外，在开发的过程中我搜集了一些比较常用的代码片段放在github 仓库里，这里我要讲的是对 UIView 的一些扩展。<br>  <a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol>
<li>flatSubviews<br>  想必大家有过这样的经历吧，有时候，我们需要对系统控件进行更改，当然也可能是对第三方控件进行修改，这个时候我们往往需要去遍历一个视图的所有子视图，当然这个时候大家可能首先会想到使用系统的 subviews 属性，但是，这只能得到当前视图的所有子视图，那么子视图的子视图呢？这里我为 UIView 扩展了一个属性  flatSubviews ，这个属性包含了视图的子视图以及子视图的子视图，其实实现方法并不难，这里主要使用到了迭代模式。下面我们来看看其中的内部实现：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// `self`'s all subviews include the subview's subviews.</span></div><div class="line">    <span class="keyword">var</span> flatSubviews: [<span class="type">UIView</span>] &#123;</div><div class="line">        <span class="keyword">var</span> views: [<span class="type">UIView</span>] = []</div><div class="line">        <span class="keyword">self</span>.subviews.forEach &#123; (sub) <span class="keyword">in</span></div><div class="line">            views.append(sub)</div><div class="line">            <span class="keyword">if</span> !sub.subviews.isEmpty &#123;</div><div class="line">                views += sub.flatSubviews</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> views</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>看到这里大家是不是觉得其实很简单呢？☺</p>
<ol>
<li>functions<br>(1) 便捷的为 View 添加圆角</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///  When positive, the background of the layer will be drawn with rounded corners. Also effects the mask generated by the`masksToBounds' property. Defaults to true. Animatable.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cornerRadius</span><span class="params">(<span class="number">_</span> radius: CGFloat)</span></span> &#123;</div><div class="line">    layer.cornerRadius = radius</div><div class="line">    layer.masksToBounds = <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(2) 快速添加点击手势</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Add tapGesture/action for particular event.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameters:</span></div><div class="line"><span class="comment">///   - tapNumber: Default is 1. The number of taps required to match</span></div><div class="line"><span class="comment">///   - target: `self`</span></div><div class="line"><span class="comment">///   - action: a `Selector`</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTapGesture</span><span class="params">(<span class="number">_</span> tapNumber: Int = <span class="number">1</span>, target: Any = <span class="keyword">self</span>, action: Selector)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> tap = <span class="type">UITapGestureRecognizer</span>(target: target, action: action)</div><div class="line">    tap.numberOfTapsRequired = tapNumber</div><div class="line">    isUserInteractionEnabled = <span class="literal">true</span></div><div class="line">    addGestureRecognizer(tap)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(3) 截取视图</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns an image of the current view</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Parameter scale: scale</span></div><div class="line">    <span class="comment">/// - Returns: A new image</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getSnapshot</span><span class="params">(scale: CGFloat = <span class="number">0</span>)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(bounds.size, <span class="literal">false</span>, scale)</div><div class="line">        drawHierarchy(<span class="keyword">in</span>: bounds, afterScreenUpdates: <span class="literal">true</span>)</div><div class="line">        <span class="keyword">let</span> image = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()!</div><div class="line">        <span class="type">UIGraphicsEndImageContext</span>()</div><div class="line">        <span class="keyword">return</span> image</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>(4) 添加边线<br>   为 View 添加边线也是一个高频的需求，我们会经常遇到为 UITextField 或者 自定义的 Cell 添加下边线。通常情况下，我们会想到使用贝塞尔曲线，我开始也是这样用的，后来发现在适配横竖屏的时候比较麻烦，如果你比较好的实现方式，希望你能告诉我。后来还是决定 使用 UIView 自定义 Line ，然后用 AutoLayout 添加约束，这样就完美的适配了横竖屏了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addBorder</span><span class="params">(<span class="keyword">for</span> edges: [UIRectEdge], width: CGFloat = <span class="number">1</span>, color: UIColor = .black, insets: UIEdgeInsets = UIEdgeInsets<span class="params">(all: <span class="number">0</span>)</span></span></span>) &#123;</div><div class="line">    <span class="keyword">var</span> edgesValues: [<span class="type">UIRectEdge</span>] = edges</div><div class="line">    <span class="keyword">if</span> edges.<span class="built_in">contains</span>(.all) &#123;</div><div class="line">        edgesValues = [.top, .bottom, .<span class="keyword">left</span>, .<span class="keyword">right</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> allSpecificBorders:[<span class="type">UIRectEdge</span>] = [.top, .bottom, .<span class="keyword">left</span>, .<span class="keyword">right</span>]</div><div class="line">    <span class="keyword">for</span> edge <span class="keyword">in</span> allSpecificBorders &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> view = viewWithTag(<span class="type">Int</span>(edge.rawValue)) &#123;</div><div class="line">            view.removeFromSuperview()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> edgesValues.<span class="built_in">contains</span>(edge) &#123;</div><div class="line">            <span class="keyword">let</span> view = <span class="type">UIView</span>()</div><div class="line">            view.tag = <span class="type">Int</span>(edge.rawValue)</div><div class="line">            view.backgroundColor = color</div><div class="line">            view.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></div><div class="line">            addSubview(view)</div><div class="line">            <span class="keyword">var</span> horizontalVisualFormat = <span class="string">"H:"</span></div><div class="line">            <span class="keyword">var</span> verticalVisualFormat = <span class="string">"V:"</span></div><div class="line">            <span class="keyword">switch</span> edge &#123;</div><div class="line">            <span class="keyword">case</span> <span class="type">UIRectEdge</span>.bottom:</div><div class="line">                horizontalVisualFormat += <span class="string">"|-(<span class="subst">\(insets.<span class="keyword">left</span>)</span>)-[v]-(<span class="subst">\(insets.<span class="keyword">right</span>)</span>)-|"</span></div><div class="line">                verticalVisualFormat += <span class="string">"[v(<span class="subst">\(width)</span>)]-(<span class="subst">\(insets.bottom)</span>)-|"</span></div><div class="line">            <span class="keyword">case</span> <span class="type">UIRectEdge</span>.top:</div><div class="line">                horizontalVisualFormat += <span class="string">"|-(<span class="subst">\(insets.<span class="keyword">left</span>)</span>)-[v]-(<span class="subst">\(insets.<span class="keyword">right</span>)</span>)-|"</span></div><div class="line">                verticalVisualFormat += <span class="string">"|-(<span class="subst">\(insets.top)</span>)-[v(<span class="subst">\(width)</span>)]"</span></div><div class="line">            <span class="keyword">case</span> <span class="type">UIRectEdge</span>.<span class="keyword">left</span>:</div><div class="line">                horizontalVisualFormat += <span class="string">"|-(<span class="subst">\(insets.<span class="keyword">left</span>)</span>)-[v(<span class="subst">\(width)</span>)]"</span></div><div class="line">                verticalVisualFormat += <span class="string">"|-(<span class="subst">\(insets.top)</span>)-[v]-(<span class="subst">\(insets.bottom)</span>)-|"</span></div><div class="line">            <span class="keyword">case</span> <span class="type">UIRectEdge</span>.<span class="keyword">right</span>:</div><div class="line">                horizontalVisualFormat += <span class="string">"[v(<span class="subst">\(width)</span>)]-(<span class="subst">\(insets.<span class="keyword">right</span>)</span>)-|"</span></div><div class="line">                verticalVisualFormat += <span class="string">"|-(<span class="subst">\(insets.<span class="keyword">left</span>)</span>)-[v]-(<span class="subst">\(insets.<span class="keyword">right</span>)</span>)-|"</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">self</span>.addConstraints(<span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: horizontalVisualFormat, options: .directionLeadingToTrailing, metrics: <span class="literal">nil</span>, views: [<span class="string">"v"</span>: view]))</div><div class="line">            <span class="keyword">self</span>.addConstraints(<span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: verticalVisualFormat, options: .directionLeadingToTrailing, metrics: <span class="literal">nil</span>, views: [<span class="string">"v"</span>: view]))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用效果：<br><img src="http://upload-images.jianshu.io/upload_images/121208-9afc52ee4f74c1e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="simulator screen shot 2017 8 12 9 20 15"></p>
<p>UI 扩展，请看    <a href="https://github.com/CNKCQ/UIKit.plus" target="_blank" rel="external">UIKit.plus</a><br>水平有限，如有疏漏，望指正<br>欢迎交流，欢迎 star  <a href="https://github.com/CNKCQ" target="_blank" rel="external">CNKCQ</a><br>遗人🌹，手有余香      <a href="http://wangchenquan.com/" target="_blank" rel="external">blog</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[完美适配，您需要知道的 SnapKit]]></title>
      <url>/2017/08/12/%E5%AE%8C%E7%BE%8E%E9%80%82%E9%85%8D%EF%BC%8C%E6%82%A8%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%20SnapKit/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   众所周知，iPhone 的屏幕是越来越多样化了，多样化的屏幕满足了用户差异化的需求，同时也增加了开发者的工作 —– 适配，面对多样化、不同屏幕尺寸的设备，之前在 iOS 中的 frame 布局以显得不合时宜，于是 Apple 推出了 AutoLayout ，AutoLayout 在可是化编程中的优势是不容置喙的，然而对于习惯于 code 界面的朋友来说就不那么友好了，面对这样的问题，众多第三方框架横空出世，目前为止支持率比较高的当属 SnapKit 了。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>    当然，如果你之前对 Masonry 非常熟悉，那么恭喜你，你可以平滑的过度到 SnapKit, 如果你对 SnapKit 比较陌生，那么也没关系，请继续往下看☺。</p>
<h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>   如果你的项目是用 CocoaPods 来管理组件的，那么你只需要在 Podfile 里加入 ：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'SnapKit'</span>, <span class="string">'~&gt; 3.0'</span></div></pre></td></tr></table></figure>
<p>然后在 terminal 里执行 </p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>等待安装成功就可以 import SnapKit 使用了。</p>
<h6 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h6><p>    SnapKit  框架的设计，简单易用，可读性好。当你想要构建一个 tableView , tableView 在父视图中的 padding 为 20, 那么用 SnapKit 怎么做呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">tableView.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">            make</div><div class="line">                .edges</div><div class="line">                .equalTo(<span class="keyword">self</span>.view)</div><div class="line">                .inset(<span class="type">UIEdgeInsets</span>(</div><div class="line">                    top: <span class="number">20</span>,</div><div class="line">                    <span class="keyword">left</span>: <span class="number">20</span>,</div><div class="line">                    bottom: <span class="number">20</span>,</div><div class="line">                    <span class="keyword">right</span>: <span class="number">20</span></div><div class="line">                )</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">``` </div><div class="line">or </div><div class="line"></div><div class="line"></div><div class="line">```swift </div><div class="line">tableView.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">            make.<span class="keyword">left</span>.top.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">20</span>)</div><div class="line">            make.<span class="keyword">right</span>.bottom.equalTo(<span class="keyword">self</span>.view).offset(-<span class="number">20</span>)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>这是最常用的写法了，当然我们的实际项目中的布局是非常复杂的，并不是所有的视图都能用 equalTo 来进行布局的，有了 SnapKit ，你可以用：</p>
<p>.equalTo  等价于 NSLayoutRelation.Equal<br>.lessThanOrEqualTo 等价于 NSLayoutRelation.GreaterThanOrEqual<br>.greaterThanOrEqualTo 等价于 NSLayoutRelation.GreaterThanOrEqual</p>
<p>我们用一张表来罗列出 SnapKit 的属性与 NSLayout 中的属性对应关系：</p>
<table>
<thead>
<tr>
<th>ViewAttribute</th>
<th>NSLayoutAttribute</th>
</tr>
</thead>
<tbody>
<tr>
<td>view.snp.left</td>
<td>NSLayoutAttribute.left</td>
</tr>
<tr>
<td>view.snp.right</td>
<td>NSLayoutAttribute.right</td>
</tr>
<tr>
<td>view.snp.top</td>
<td>NSLayoutAttribute.top</td>
</tr>
<tr>
<td>view.snp.bottom</td>
<td>NSLayoutAttribute.bottom</td>
</tr>
<tr>
<td>view.snp.leading</td>
<td>NSLayoutAttribute.leading</td>
</tr>
<tr>
<td>view.snp.trailing</td>
<td>NSLayoutAttribute.trailing</td>
</tr>
<tr>
<td>view.snp.width</td>
<td>NSLayoutAttribute.width</td>
</tr>
<tr>
<td>view.snp.height</td>
<td>NSLayoutAttribute.height</td>
</tr>
<tr>
<td>view.snp.centerX</td>
<td>NSLayoutAttribute.centerX</td>
</tr>
<tr>
<td>view.snp.centerY</td>
<td>NSLayoutAttribute.centerY</td>
</tr>
<tr>
<td>view.snp.lastBaseline</td>
<td>NSLayoutAttribute.lastBaseline</td>
</tr>
</tbody>
</table>
<p>通过这张表，我们可以根据自己的需要对相应的动画进行布局，但这还不能完全满足我们的需求，我们的应用是非常复杂的，如果产品要求我们的 APP 需要根据用户的交互反馈来更新视图的 frame 或者 需要做动画呢？别担心，SnapKit 为我们提供了 Constraint 属性关联。也就是说我们可以将要更改的约束进行关联，然后改变它，如：<br>声明关联属性</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> topConstraint: <span class="type">Constraint</span>? = <span class="literal">nil</span></div></pre></td></tr></table></figure>
<p>初始化</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>.topConstraint = make.top.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">100</span>).constraint</div><div class="line">            make.centerX.equalTo(<span class="keyword">self</span>.view.snp.centerX)</div><div class="line">            make.width.equalTo(<span class="number">60</span>)</div><div class="line">            make.height.equalTo(<span class="number">30</span>)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>更改</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.topConstraint?.update(offset: <span class="number">200</span>)</div><div class="line">            <span class="keyword">self</span>.view.layoutIfNeeded()</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>这样一个简单的动画就完成了。当然，如果你想更新约束，你还可以用 .snp.updateConstraints</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.button.snp.updateConstraints(&#123; (make) <span class="keyword">in</span></div><div class="line">               make.top.equalTo(<span class="number">200</span>)</div><div class="line">           &#125;)</div><div class="line">           <span class="keyword">self</span>.view.layoutIfNeeded()</div></pre></td></tr></table></figure>
<p>还有一个问题是，如果我们引用了一个三方视图库，我们想改变他的约束，担忧不知道原来的约束怎么办呢？其实我们可以用  snp.remakeConstraints</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.snp.remakeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">    make.top.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">100</span>)</div><div class="line">    make.centerX.equalTo(<span class="keyword">self</span>.view.snp.centerX)</div><div class="line">    make.width.equalTo(<span class="number">60</span>)</div><div class="line">    make.height.equalTo(<span class="number">30</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样首先会移除原有的控件的约束，然后重新设置约束。<br>看到这里相信大家对 SnapKit 的使用并不陌生了吧！</p>
<p>这里有一个常见的问题， 如果我们需要通过数组动态创建一组控件，要求长宽高都相等，并列排放在父视图中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (idx, item) <span class="keyword">in</span> items.enumerated() &#123;</div><div class="line">            <span class="keyword">if</span> items.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            <span class="keyword">if</span> idx == <span class="number">0</span> &#123;</div><div class="line">                item.snp.makeConstraints(&#123; (make) <span class="keyword">in</span></div><div class="line">                    make.<span class="keyword">left</span>.top.bottom.equalTo(<span class="keyword">self</span>)</div><div class="line">                    make.width.equalTo(items[idx + <span class="number">1</span>])</div><div class="line">                    make.<span class="keyword">right</span>.equalTo(items[idx + <span class="number">1</span>].snp.<span class="keyword">left</span>)</div><div class="line">                &#125;)</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> idx == items.<span class="built_in">count</span> - <span class="number">1</span> &#123;</div><div class="line">                item.snp.makeConstraints(&#123; (make) <span class="keyword">in</span></div><div class="line">                    make.<span class="keyword">right</span>.top.bottom.equalTo(<span class="keyword">self</span>)</div><div class="line">                    make.width.equalTo(items[idx - <span class="number">1</span>])</div><div class="line">                &#125;)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                item.snp.makeConstraints(&#123; (make) <span class="keyword">in</span></div><div class="line">                    make.top.bottom.equalTo(<span class="keyword">self</span>)</div><div class="line">                    make.<span class="keyword">left</span>.equalTo(items[idx - <span class="number">1</span>].snp.<span class="keyword">right</span>)</div><div class="line">                    make.width.equalTo(items[idx - <span class="number">1</span>].snp.width)</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>这样，一组动态的创建好了！<br>请看    <a href="https://github.com/iOS-examples-Swift/AutoLayoutDemo" target="_blank" rel="external">AutoLayoutDemo</a><br>水平有限，如有疏漏，望指正<br>欢迎交流，欢迎 star  <a href="https://github.com/CNKCQ" target="_blank" rel="external">CNKCQ</a><br>遗人🌹，手有余香      <a href="http://wangchenquan.com/" target="_blank" rel="external">blog</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://snapkit.io/docs/" target="_blank" rel="external">snapKit</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[神奇，Swift 中竟然可以这样使用保留字!]]></title>
      <url>/2017/08/08/%E7%A5%9E%E5%A5%87%EF%BC%8CSwift%20%E4%B8%AD%E7%AB%9F%E7%84%B6%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E4%BD%BF%E7%94%A8%E4%BF%9D%E7%95%99%E5%AD%97!/</url>
      <content type="html"><![CDATA[<p>前一段时间，记得我在写一个 enum 时，发现了一个有意思的事情，当我在定义 enum 时会习惯性的定义一个 default ，在 Swift 中这是编译不过的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RefreshState</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">default</span></div><div class="line">    <span class="keyword">case</span> always</div><div class="line">    <span class="keyword">case</span> didLoad</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>比如说这样写就会报 error :<br>Keyword ‘default’ cannot be used as an identifier here<br>我们可以看到 keyword 是不能用作 identifier 的，编译器在报这个 error 时，大家一定会注意到可以通过 fix 来避免这样的问题：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RefreshState</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> `<span class="keyword">default</span>`</div><div class="line">    <span class="keyword">case</span> always</div><div class="line">    <span class="keyword">case</span> didLoad</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就没有任何 warning 或者 error 了<br>同理，我们在声明变量的时候也可以这样做：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="class"><span class="keyword">class</span>: <span class="title">String</span>!</span></div></pre></td></tr></table></figure>
<p>to</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> `<span class="class"><span class="keyword">class</span>`: <span class="title">String</span>!</span></div></pre></td></tr></table></figure>
<p>这样看来，当我们在使用到 keyword 的时候也就不必为了避开它委屈求全了。<br>在 OC 中大家为了避免循环引用会经常用到 weakSelf  and strongSelf，那么 RAC 中提供了 @weakify(self) and @strongify(self), 这个实现是非常优雅的。<br>然而在 Swift 中，我想大家对这样的写法并不陌生吧：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.async &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            strongSelf.label.frame = <span class="type">CGRect</span>(x: <span class="number">40</span>, y: <span class="number">200</span>, width: <span class="number">40</span>, height: <span class="number">40</span>)</div><div class="line">            strongSelf.label.backgroundColor = .blue</div><div class="line">            strongSelf.label.text = <span class="string">"hello"</span></div><div class="line">            strongSelf.label.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="type">UIFont</span>.systemFontSize)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>对于这段代码，我们有什么需要优化的呢？鉴于上面所讲的我们也可以这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.main.async &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> `<span class="keyword">self</span>` = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">self</span>.label.frame = <span class="type">CGRect</span>(x: <span class="number">40</span>, y: <span class="number">200</span>, width: <span class="number">40</span>, height: <span class="number">40</span>)</div><div class="line">            <span class="keyword">self</span>.label.backgroundColor = .blue</div><div class="line">            <span class="keyword">self</span>.label.text = <span class="string">"hello"</span></div><div class="line">            <span class="keyword">self</span>.label.font = <span class="type">UIFont</span>.systemFont(ofSize: <span class="type">UIFont</span>.systemFontSize)</div><div class="line"></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>我更倾向与这样魔性的写法，你觉得呢？</p>
<p>水平有限，如有疏漏，望指正<br>欢迎交流，欢迎 star  <a href="https://github.com/CNKCQ" target="_blank" rel="external">github</a><br>遗人🌹，手有余香</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动手创建私有 CocoaPods]]></title>
      <url>/2017/06/10/%E5%8A%A8%E6%89%8B%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%20CocoaPods/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在分离公司的业务库，所以用到了 private cocoapods，在此记录下所遇到的坑</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App </tag>
            
            <tag> Update </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS客户端升级提醒策略]]></title>
      <url>/2017/05/10/iOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8D%87%E7%BA%A7%E6%8F%90%E9%86%92%E7%AD%96%E7%95%A5/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个iOS开发者，对于iOS客户如何提醒用户升级是一个不可回避的问题，也许你会说这是产品汪应该考虑的事情，其实也不完全是，万一产品汪没有考虑到呢？😜这种情况下你是不是可以拿出来和他撕一撕。<br> <a id="more"></a></p>
<h3 id="提醒策略"><a href="#提醒策略" class="headerlink" title="提醒策略"></a>提醒策略</h3><h6 id="1-App-Store-提醒"><a href="#1-App-Store-提醒" class="headerlink" title="1. App Store 提醒"></a>1. App Store 提醒</h6><p>其实 App Store 提醒是每一款 App 都具有的功能，我们无需做额外的操作，有苹果应用商店自动检测提示，我们需要注意的是写好产品更新文案即可。</p>
<h6 id="2-远程推送提醒"><a href="#2-远程推送提醒" class="headerlink" title="2. 远程推送提醒"></a>2. 远程推送提醒</h6><p>当我们有新的版本发布的时候，我们可以通过后台服务器推送去通知用户更新客户端。</p>
<p>优点：</p>
<ol>
<li>新版本一发布我们就可以通知到用户哪怕他并没有打开过我们的应用</li>
</ol>
<p>缺点：</p>
<ol>
<li>如果用户通过其他途径已经更新了，这种情况下还是会受到通知，这无疑为用户增加了干扰。</li>
<li>如果用户关闭了推送通知，那么服务器即使推送了更新，用户也不会受到更新提示</li>
</ol>
<h6 id="3-App-内部弹框提醒"><a href="#3-App-内部弹框提醒" class="headerlink" title="3. App 内部弹框提醒"></a>3. App 内部弹框提醒</h6><p>App 内部弹框更新提醒，这是目前应用得非常广泛的一种更新提醒方式，其中有弱更强更之分。</p>
<p>在 App 只做了一些小的修改的时候，我们就没有必要强制用户更新，如果我们出现了重大改版或者其他因素导致老旧的 App 无法正常使用，这种情况下，我们需要强制用户更新 App。那么问题来了，我们如何控制什么时候强更，什么时候弱更呢？这就需要后台服务器的兄弟配合了，我们的后台兄弟需要为我们提供一个接口，这个接口里包含我们所需要的强弱更判断，以及版本判断，这样我们就可以灵活的进行强弱更以及版本判断了</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> App </tag>
            
            <tag> Update </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS10上传AppStore所遇到的坑]]></title>
      <url>/2016/09/25/iOS10%E4%B8%8A%E4%BC%A0AppStore%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>苹果的反馈邮件：<br>Dear developer,<br>We have discovered one or more issues with your recent delivery for “城满财富”. To process your delivery, the following issues must be corrected:<br><a id="more"></a><br>This app attempts to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSContactsUsageDescription key with a string value explaining to the user how the app uses this data.<br>This app attempts to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSCalendarsUsageDescription key with a string value explaining to the user how the app uses this data.<br>This app attempts to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSPhotoLibraryUsageDescription key with a string value explaining to the user how the app uses this data.<br>This app attempts to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSBluetoothPeripheralUsageDescription key with a string value explaining to the user how the app uses this data.<br>This app attempts to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSMicrophoneUsageDescription key with a string value explaining to the user how the app uses this data.<br>This app attempts to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSCameraUsageDescription key with a string value explaining to the user how the app uses this data.<br>This app attempts to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSMotionUsageDescription key with a string value explaining to the user how the app uses this data.<br>Though you are not required to fix the following issues, we wanted to make you aware of them:<br>Missing Push Notification Entitlement - Your app includes an API for Apple’s Push Notification service, but the aps-environment entitlement is missing from the app’s signature. To resolve this, make sure your App ID is enabled for push notification in the Provisioning Portal. Then, sign your app with a distribution provisioning profile that includes the aps-environment entitlement. This will create the correct signature, and you can resubmit your app. See “Provisioning and Development” in the Local and Push Notification Programming Guide for more information. If your app does not use the Apple Push Notification service, no action is required. You may remove the API from future submissions to stop this warning. If you use a third-party framework, you may need to contact the developer for information on removing the API.<br>Once the required corrections have been made, you can then redeliver the corrected binary.<br>Regards,<br>The App Store team</p>
<p>看一下苹果的官方描述：<br>You must statically declare your app’s intended use of protected data classes by including the appropriate purpose string keys in your Info.plist file. For example, you must include the NSCalendarsUsageDescription key to access the user’s Calendar data. If you don’t include the relevant purpose string keys, your app exits when it tries to access the data.<br>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 🖼 Photo Library --&gt;</div><div class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;请点击“允许”以允许访问&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📷 Camera --&gt;</div><div class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🎤 Microphone --&gt;</div><div class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location --&gt;</div><div class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location When In Use --&gt;</div><div class="line">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location Always --&gt;</div><div class="line">&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📆 Calendars --&gt;</div><div class="line">&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- ⏰ Reminders --&gt;</div><div class="line">&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🏊 Motion --&gt;</div><div class="line">&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 💊 Health Update --&gt;</div><div class="line">&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 💊 Health Share --&gt;</div><div class="line">&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- ᛒ🔵 Bluetooth Peripheral --&gt;</div><div class="line">&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🎵 Media Library --&gt;</div><div class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;&lt;/string&gt;</div></pre></td></tr></table></figure></p>
<p><string></string> 之间的描述一定要填写</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxSwift -- 项目实战]]></title>
      <url>/2016/09/20/RxSwift%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>RxSwift  源自ReactiveX，它蕴含了深刻的FRP思想，这是一个崭新的世界，我也是慕名而来，本着好学的心态，叩开RxSwift的大门，来了之后才发现，这里人迹罕至，路上满是泥泞，坑坑洼洼，幸好遇到了RxExample, 从此便奉为圭皋，仔细研读，跟随者开拓者的足迹，我也进行了一次RxSwift之旅，其中酸甜苦辣，请亲自品尝。</p>
<h3 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h3><p>装备的选择对你趟坑过河的影响还是蛮大的，选好内裤，走起路来便可以雄赳赳气昂昂。 我选择的内裤便是 Moya、Alamofire、ObjectMapper 等，有了这些内裤，你便可以优雅的踩坑。</p>
 <a id="more"></a>
<h3 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h3><p>作为一个swifter Alamofire 对你来说并不陌生，它的优雅与简洁没有多少库能出其左右，然而对于 Moya 你可能未必熟悉，不过你不熟悉也没关系，协议和扩展造就了他的优雅与平易近人，你可以轻松的用它来封装你的网络请求层，他与Alamofire 也是不离不弃.<br>如果想获取信息，那么你需这样做：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">enum OSCIOService &#123;</div><div class="line">    <span class="keyword">case</span> NewsList, NewBanner, TweetList, BlogList, EventList, EventBanner</div><div class="line">    <span class="keyword">case</span> Login(username: String, password: String)</div><div class="line">    <span class="keyword">case</span> FindUser(name: String)</div><div class="line">    <span class="keyword">case</span> Search(content: String)</div><div class="line">&#125;</div><div class="line"></div><div class="line">extension OSCIOService: TargetType &#123;</div><div class="line"></div><div class="line">    var baseURL: NSURL &#123;</div><div class="line">//        <span class="built_in">return</span> NSURL(string: <span class="string">"http://www.oschina.net/action/api"</span>)! //XML格式</div><div class="line">        <span class="built_in">return</span> NSURL(string: <span class="string">"http://www.oschina.net/action/apiv2"</span>)! //JSON格式</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var path: String &#123;</div><div class="line">        switch self &#123;</div><div class="line">        <span class="keyword">case</span> .NewsList:</div><div class="line">            <span class="built_in">return</span> <span class="string">"/news"</span></div><div class="line">        <span class="keyword">case</span> .NewBanner:</div><div class="line">            <span class="built_in">return</span> <span class="string">"/banner"</span></div><div class="line">        <span class="keyword">case</span> .TweetList:</div><div class="line">            <span class="built_in">return</span> <span class="string">"/tweet_list"</span></div><div class="line">        <span class="keyword">case</span> .BlogList:</div><div class="line">            <span class="built_in">return</span> <span class="string">"/blog_list"</span></div><div class="line">        <span class="keyword">case</span> .EventList:</div><div class="line">            <span class="built_in">return</span> <span class="string">"/event_list"</span></div><div class="line">        <span class="keyword">case</span> .EventBanner:</div><div class="line">            <span class="built_in">return</span> <span class="string">"/banner"</span></div><div class="line">        <span class="keyword">case</span> .Login( _, _):</div><div class="line">            <span class="built_in">return</span> <span class="string">"/login_validate"</span></div><div class="line">        <span class="keyword">case</span> .FindUser(_):</div><div class="line">            <span class="built_in">return</span> <span class="string">"/find_user"</span></div><div class="line">        <span class="keyword">case</span> .Search(_):</div><div class="line">            <span class="built_in">return</span> <span class="string">"/search_list"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var method: Moya.Method &#123;</div><div class="line">        switch self &#123;</div><div class="line">        <span class="keyword">case</span> .Login:</div><div class="line">            <span class="built_in">return</span> .POST</div><div class="line">        default:</div><div class="line">            <span class="built_in">return</span> .GET</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var parameters: [String: AnyObject]? &#123;</div><div class="line">        switch self &#123;</div><div class="line">        <span class="keyword">case</span> .Login(<span class="built_in">let</span> username, <span class="built_in">let</span> password):</div><div class="line">            <span class="built_in">return</span> [<span class="string">"username"</span>: username, <span class="string">"pwd"</span>: password]</div><div class="line">        <span class="keyword">case</span> .NewBanner:</div><div class="line">            <span class="built_in">return</span> [<span class="string">"catalog"</span>: 1]</div><div class="line">        <span class="keyword">case</span> .EventBanner:</div><div class="line">            <span class="built_in">return</span> [<span class="string">"catalog"</span>: 3]</div><div class="line">        <span class="keyword">case</span> .FindUser(<span class="built_in">let</span> name):</div><div class="line">            <span class="built_in">return</span> [<span class="string">"name"</span>:name]</div><div class="line">        default:</div><div class="line">             <span class="built_in">return</span> nil</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var sampleData: NSData &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"&#123;&#125;"</span>.dataUsingEncoding(NSUTF8StringEncoding)! // <span class="keyword">for</span> <span class="built_in">test</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var multipartBody: [MultipartFormData]? &#123;</div><div class="line">        <span class="built_in">return</span> nil</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就可以封装好你的API了<br>既然我们来到的FRP的路上，那么我们应该也改改以前惯用的MVC了，MVVM 才是更优雅的姿势，那个问题来了，我们的viewModel 呢？别着急，请看下面：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class NewsViewModel &#123;</div><div class="line">    var provider: RxMoyaProvider&lt;OSCIOService&gt;</div><div class="line">    var backgroundScheduler: OperationQueueScheduler!</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="title">init</span></span>() &#123;</div><div class="line">        <span class="built_in">let</span> operationQueue = NSOperationQueue()</div><div class="line">        backgroundScheduler = OperationQueueScheduler(operationQueue: operationQueue)</div><div class="line">        self.provider = RxMoyaProvider&lt;OSCIOService&gt;()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func fetch() -&gt; Observable&lt;[NewsItem]?&gt; &#123;</div><div class="line">        <span class="built_in">return</span> Observable.create(&#123; observer -&gt; Disposable <span class="keyword">in</span></div><div class="line">            self.provider.request(OSCIOService.NewsList) &#123; response <span class="keyword">in</span></div><div class="line">                switch response &#123;</div><div class="line">                <span class="keyword">case</span> <span class="built_in">let</span> .Success(response):</div><div class="line">                    <span class="built_in">let</span> result = Mapper&lt;NewsRootClass&gt;().map(String(data: response.data, encoding:  NSUTF8StringEncoding))</div><div class="line">                    observer.on(Event.Next(result?.result?.items))</div><div class="line">                <span class="keyword">case</span> <span class="built_in">let</span> .Failure(error):</div><div class="line">                    observer.on(Event.Error(error))</div><div class="line">                &#125;</div><div class="line">                observer.onCompleted()</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> NopDisposable.instance</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在viewModel中我提供了一个网络 Observable 以供外部订阅，将数据转化为可以订阅的Stream<br>那么这样我们就可以到 Controller 进行数据订阅了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> viewModel = NewsViewModel()</div><div class="line">        viewModel.fetch().subscribe(</div><div class="line">            onNext: &#123; entities <span class="keyword">in</span></div><div class="line">                <span class="keyword">if</span> <span class="built_in">let</span> result = entities &#123;</div><div class="line">                    self.newsItems = result</div><div class="line">                &#125;</div><div class="line">                log.info(<span class="string">"你好"</span>)</div><div class="line">            &#125;, onError: &#123; error <span class="keyword">in</span></div><div class="line">                log.error(<span class="string">"\(error)"</span>)</div><div class="line">            &#125;, onCompleted: &#123;</div><div class="line">                log.info(<span class="string">"completed"</span>)</div><div class="line">            &#125;, onDisposed: &#123;</div><div class="line">                log.info(<span class="string">"disposed"</span>)</div><div class="line"></div><div class="line">        &#125;).addDisposableTo(self.disposeBag)</div></pre></td></tr></table></figure></p>
<p>当我们拿到了数据，我们就可以进行数据展示了，这与我们常规的数据展示不无差别<br>好了，由于文字功底有限，我就不赘述了</p>
<p>完整项目可移步：<a href="https://github.com/CNKCQ" target="_blank" rel="external">https://github.com/CNKCQ</a></p>
<p>相关资料：<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="external">https://mcxiaoke.gitbooks.io/rxdocs/content/</a><br><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md" target="_blank" rel="external">https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md</a><br><a href="http://cocoadocs.org/docsets/RxCocoa/1.5/index.html" target="_blank" rel="external">http://cocoadocs.org/docsets/RxCocoa/1.5/index.html</a><br><a href="https://coderwall.com/p/vti_8w/rxswift-learning-resources" target="_blank" rel="external">https://coderwall.com/p/vti_8w/rxswift-learning-resources</a><br><a href="https://leon_lizi.gitbooks.io/rx-/content/observableyu_alamofire.html" target="_blank" rel="external">https://leon_lizi.gitbooks.io/rx-/content/observableyu_alamofire.html</a><br><a href="http://www.oschina.net/openapi/docs/" target="_blank" rel="external">http://www.oschina.net/openapi/docs/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS设计编码规范]]></title>
      <url>/2016/07/25/iOS%E8%AE%BE%E8%AE%A1%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h3 id="1-iOS-常用系统控件"><a href="#1-iOS-常用系统控件" class="headerlink" title="1, iOS 常用系统控件"></a>1, iOS 常用系统控件</h3><p></p><p>1.0.1 Status Bar 状态栏</p><br>状态栏的信息内容有两种不同的风格：暗色（黑）和亮色（白）:<br><img src="http://img.ui.cn/data/file/2/8/3/138382.jpg?imageView2/2/w/900/q/90" alt=""><br><p></p>
<h4 id="1-0-2-Navigation-Bar-导航栏"><a href="#1-0-2-Navigation-Bar-导航栏" class="headerlink" title="1.0.2 Navigation Bar 导航栏"></a>1.0.2 Navigation Bar 导航栏</h4><p>导航栏总在屏幕的顶部，状态栏的正下方。默认的，导航栏背景会进行轻微半透明处理，以及对下面的内容进行毛玻璃般的模糊处理:<br><img src="http://img.ui.cn/data/file/3/8/3/138383.jpg?imageView2/2/w/900/q/90" alt=""><br><br> <a id="more"></a></p>
<h6 id="1-0-3-Tab-Bar-标签栏"><a href="#1-0-3-Tab-Bar-标签栏" class="headerlink" title="1.0.3 Tab Bar 标签栏"></a>1.0.3 Tab Bar 标签栏</h6><p>标签栏在屏幕底部。默认情况下背景使用和导航栏一样的轻微半透明效果，以及使用和系统一样的模糊处理下面遮住的内容。:<br><img src="http://img.ui.cn/data/file/3/9/3/138393.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h6 id="1-0-4-Table-View-表格视图"><a href="#1-0-4-Table-View-表格视图" class="headerlink" title="1.0.4 Table View 表格视图"></a>1.0.4 Table View 表格视图</h6><p>表格视图用于呈现大多数列表风格的信息，可以一列或者多列，也可以选择几行来划分信息或分组。<br>纯表格:<br><img src="http://img.ui.cn/data/file/4/9/3/138394.jpg?imageView2/2/w/900/q/90" alt=""><br><br>分组表格(头部和尾部字体：13pt):<br><img src="http://img.ui.cn/data/file/3/0/4/138403.jpg?imageView2/2/w/900/q/90" alt=""><br><br>默认:<br><img src="http://img.ui.cn/data/file/5/0/4/138405.jpg?imageView2/2/w/900/q/90" alt=""><br><br>系统自带cell 默认中高度 44pt <br><br>带副标题:<br><img src="http://img.ui.cn/data/file/6/0/4/138406.jpg?imageView2/2/w/900/q/90" alt=""><br><br>带数值:<br><img src="http://img.ui.cn/data/file/9/0/4/138409.jpg?imageView2/2/w/900/q/90" alt=""><br><br>表格视图每一行cell选中自带高亮</p>
<h4 id="1-0-5-Alerts-警告提醒"><a href="#1-0-5-Alerts-警告提醒" class="headerlink" title="1.0.5 Alerts 警告提醒"></a>1.0.5 Alerts 警告提醒</h4><p>警告提醒用于通知用户关键信息，以及可以强制用户做出一些动作选择。<br>警告视图总包含一个标题文本，可以不限于一行（对于纯信息警告如“OK”），以及不限一个或两个按钮（请求式的决定，如“发送”和“取消”）。:<br><img src="http://img.ui.cn/data/file/7/1/4/138417.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-0-6-Actions-Sheets-动作菜单"><a href="#1-0-6-Actions-Sheets-动作菜单" class="headerlink" title="1.0.6 Actions Sheets 动作菜单"></a>1.0.6 Actions Sheets 动作菜单</h4><p>用于从可执行的动作中选择执行一个动作，要求App用户选择一个动作继续，或者取消。:<br><img src="http://img.ui.cn/data/file/5/1/4/138415.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-0-7-Switch-开关"><a href="#1-0-7-Switch-开关" class="headerlink" title="1.0.7 Switch 开关"></a>1.0.7 Switch 开关</h4><p>用于从可执行的动作中选择执行一个动作，要求App用户选择一个动作继续，或者取消。:<br><img src="http://img.ui.cn/data/file/6/3/4/138436.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-0-8-Search-Bar-搜索栏"><a href="#1-0-8-Search-Bar-搜索栏" class="headerlink" title="1.0.8 Search Bar 搜索栏"></a>1.0.8 Search Bar 搜索栏</h4><p>搜索栏默认有两种风格：凸显（Prominent）和最小（Minimal）风格。两种风格的功能都相同。:<br>（无提示栏、有提示栏）<br><img src="http://img.ui.cn/data/file/8/8/3/138388.jpg?imageView2/2/w/900/q/90" alt=""><br><br>（最小风格的搜索栏）<br><img src="http://img.ui.cn/data/file/0/9/3/138390.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-0-9-Edit-menu-编辑菜单"><a href="#1-0-9-Edit-menu-编辑菜单" class="headerlink" title="1.0.9 Edit menu 编辑菜单"></a>1.0.9 Edit menu 编辑菜单</h4><p>在一个元素被选定时(文本，图片及其他)，编辑菜单允许用户执行复制、粘贴、剪切等操作:<br><img src="http://img.ui.cn/data/file/8/1/4/138418.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-1-1-Edit-menu-浮动窗"><a href="#1-1-1-Edit-menu-浮动窗" class="headerlink" title="1.1.1 Edit menu 浮动窗"></a>1.1.1 Edit menu 浮动窗</h4><p>当要求用户在程序进行的同时输入多个信息时，浮动框（Popover）是个绝佳选择:<br><img src="http://img.ui.cn/data/file/4/2/4/138424.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-1-2-Segment-Controls-分段控件"><a href="#1-1-2-Segment-Controls-分段控件" class="headerlink" title="1.1.2 Segment Controls 分段控件"></a>1.1.2 Segment Controls 分段控件</h4><p>分段控件包含一系列分段（至少两个），可以用于筛选内容或为整理的分类内容创建标签:<br><img src="http://img.ui.cn/data/file/9/2/4/138429.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-1-3-Sliders-滑块"><a href="#1-1-3-Sliders-滑块" class="headerlink" title="1.1.3 Sliders 滑块"></a>1.1.3 Sliders 滑块</h4><p>滑块控件可以让用户从一个允许范围内滑动滑块选择一个特定的值:<br><img src="http://img.ui.cn/data/file/3/3/4/138433.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-1-4-Stepper-进步器"><a href="#1-1-4-Stepper-进步器" class="headerlink" title="1.1.4 Stepper 进步器"></a>1.1.4 Stepper 进步器</h4><p>一个步进器需要包含两个分段按钮，一个用于减少当前值，一个用于增加。:<br><img src="http://img.ui.cn/data/file/5/3/4/138435.jpg?imageView2/2/w/900/q/90" alt=""><br></p>
<h4 id="1-1-5-Picker-选择器"><a href="#1-1-5-Picker-选择器" class="headerlink" title="1.1.5 Picker 选择器"></a>1.1.5 Picker 选择器</h4><p>选择器通常用作级联表达，常见的时间选择器:<br><img src="https://designcode.io/cloud/chapter1/Design-Picker.jpg" alt=""><br></p>
<h4 id="1-1-6-Activity-dialog-活动对话框"><a href="#1-1-6-Activity-dialog-活动对话框" class="headerlink" title="1.1.6 Activity dialog  活动对话框"></a>1.1.6 Activity dialog  活动对话框</h4><p>活动对话框用于内容（text, images, links）分享:<br><img src="https://designcode.io/cloud/chapter1/Design-Share.jpg" alt=""><br></p>
<h4 id="1-1-7-Collection-View-网格视图"><a href="#1-1-7-Collection-View-网格视图" class="headerlink" title="1.1.7 Collection View 网格视图"></a>1.1.7 Collection View 网格视图</h4><p>通常用于网格布局（九宫格，瀑布流）:<br><img src="https://designcode.io/cloud/chapter1/Design-CollectionView.jpg" alt=""><br><br>Collection默认选中没有高亮</p>
<h4 id="1-1-8-Toolbar-工具栏"><a href="#1-1-8-Toolbar-工具栏" class="headerlink" title="1.1.8 Toolbar 工具栏"></a>1.1.8 Toolbar 工具栏</h4><p>当遇到多种操作可以考虑使用工具栏:<br><img src="https://designcode.io/cloud/chapter1/Design-Toolbar.jpg" alt=""><br></p>
<h4 id="1-0-8-System-icons-系统icon"><a href="#1-0-8-System-icons-系统icon" class="headerlink" title="1.0.8 System icons 系统icon"></a>1.0.8 System icons 系统icon</h4><p>系统图标往往有特定的意向表达，被用户熟知，适当的应用系统图标会降低app的使用难度,  提高用户体验:<br><img src="https://designcode.io/cloud/chapter1/iOS-Icons.jpg" alt=""><br></p>
<h3 id="2-iOS-常用配色方案"><a href="#2-iOS-常用配色方案" class="headerlink" title="2, iOS 常用配色方案"></a>2, iOS 常用配色方案</h3><h4 id="2-0-1-iOS-系统默认颜色"><a href="#2-0-1-iOS-系统默认颜色" class="headerlink" title="2.0.1 iOS 系统默认颜色"></a>2.0.1 iOS 系统默认颜色</h4><table>
<thead>
<tr>
<th>Name</th>
<th>hex</th>
</tr>
</thead>
<tbody>
<tr>
<td>groupTableViewBackgroundColor</td>
<td>#EFEFF4</td>
</tr>
<tr>
<td>lightTextColor</td>
<td>#FFFFFF</td>
</tr>
<tr>
<td>darkTextColor</td>
<td>#000000</td>
</tr>
<tr>
<td>blackColor</td>
<td>#000000</td>
</tr>
<tr>
<td>darkGrayColor</td>
<td>#555555</td>
</tr>
<tr>
<td>lightGrayColor</td>
<td>#AAAAAA</td>
</tr>
<tr>
<td>grayColor</td>
<td>#7F7F7F</td>
</tr>
<tr>
<td>whiteColor</td>
<td>#FFFFFF</td>
</tr>
<tr>
<td>redColor</td>
<td>#FF0000</td>
</tr>
<tr>
<td>greenColor</td>
<td>#00FF00</td>
</tr>
<tr>
<td>blueColor</td>
<td>#0000FF</td>
</tr>
<tr>
<td>cyanColor</td>
<td>#00FFFF</td>
</tr>
<tr>
<td>yellowColor</td>
<td>#FFFF00</td>
</tr>
<tr>
<td>magentaColor</td>
<td>#FF00FF</td>
</tr>
<tr>
<td>orangeColor</td>
<td>#FF7F00</td>
</tr>
<tr>
<td>purpleColor</td>
<td>#7F007F</td>
</tr>
<tr>
<td>brownColor</td>
<td>#996633</td>
</tr>
<tr>
<td>clearColor</td>
<td>#000000</td>
</tr>
</tbody>
</table>
<h4 id="2-0-2-iOS-苹果官方设计指南推荐常用颜色"><a href="#2-0-2-iOS-苹果官方设计指南推荐常用颜色" class="headerlink" title="2.0.2 iOS 苹果官方设计指南推荐常用颜色"></a>2.0.2 iOS 苹果官方设计指南推荐常用颜色</h4><p><img src="https://cloud.githubusercontent.com/assets/8440220/18087618/b4d2e3c8-6ee8-11e6-8b9b-c0ad049e3736.png" alt=""><br></p>
<h4 id="2-0-3-iOS-推荐配色"><a href="#2-0-3-iOS-推荐配色" class="headerlink" title="2.0.3 iOS 推荐配色"></a>2.0.3 iOS 推荐配色</h4><p><img src="https://designcode.io/cloud/chapter1/Colors.jpg" alt=""><br></p>
<h3 id="3-iOS-常用系统字体"><a href="#3-iOS-常用系统字体" class="headerlink" title="3, iOS 常用系统字体"></a>3, iOS 常用系统字体</h3><table>
<thead>
<tr>
<th>Element</th>
<th>Size(pt)</th>
<th>Weight</th>
<th>Spacing(pt)</th>
<th>Type      </th>
</tr>
</thead>
<tbody>
<tr>
<td>systemFont</td>
<td>14</td>
<td>default</td>
<td>default</td>
<td>Text</td>
</tr>
<tr>
<td>smallSystemFont</td>
<td>12</td>
<td>default</td>
<td>default</td>
<td>Text</td>
</tr>
<tr>
<td>buttonFont</td>
<td>18</td>
<td>default</td>
<td>default</td>
<td>Text</td>
</tr>
<tr>
<td>labelFont</td>
<td>17</td>
<td>default</td>
<td>default</td>
<td>Text</td>
</tr>
<tr>
<td>Nav Bar Title</td>
<td>17</td>
<td>Medium</td>
<td>0.5</td>
<td>Display</td>
</tr>
<tr>
<td>Nav Bar Button</td>
<td>17</td>
<td>Regular</td>
<td>0.5</td>
<td>Display</td>
</tr>
<tr>
<td>Search Bar</td>
<td>13.5</td>
<td>Regular</td>
<td>0</td>
<td>Text</td>
</tr>
<tr>
<td>Tab Bar Button</td>
<td>10</td>
<td>Regular</td>
<td>0.1</td>
<td>Text</td>
</tr>
<tr>
<td>Table Header</td>
<td>12.5</td>
<td>Regular</td>
<td>0.25</td>
<td>Text</td>
</tr>
<tr>
<td>Table Row</td>
<td>16.5</td>
<td>Regular</td>
<td>0</td>
<td>Text</td>
</tr>
<tr>
<td>Table Row Subtitle</td>
<td>12</td>
<td>Regular</td>
<td>0</td>
<td>Text</td>
</tr>
<tr>
<td>Table Footer</td>
<td>12.5</td>
<td>Regular</td>
<td>0.2</td>
<td>Text</td>
</tr>
<tr>
<td>Action Sheets</td>
<td>20</td>
<td>Regular / Medium</td>
<td>0.5</td>
<td>Display</td>
</tr>
</tbody>
</table>
<p><a href="https://developer.apple.com/ios/human-interface-guidelines" target="_blank" rel="external">https://developer.apple.com/ios/human-interface-guidelines</a> iOS官方设计指南 <br><br><a href="http://www.ui.cn/detail/32167.html" target="_blank" rel="external">http://www.ui.cn/detail/32167.html</a> 中文 <br><br><a href="http://ivomynttinen.com/blog/ios-design-guidelines" target="_blank" rel="external">http://ivomynttinen.com/blog/ios-design-guidelines</a> 英文 <br><br><a href="http://ms.csdn.net/geek/72062" target="_blank" rel="external">http://ms.csdn.net/geek/72062</a> 全新Apple iOS设计规范指南 <br><br><a href="http://wiki.jikexueyuan.com/project/ios-9-human-computer-interface-guidelines/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/ios-9-human-computer-interface-guidelines/</a> iOS 9 人机交互指南 <br><br><a href="https://designcode.io/iosdesign-guidelines" target="_blank" rel="external">https://designcode.io/iosdesign-guidelines</a> <br></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Write once Run on iOS/Android]]></title>
      <url>/2016/06/21/ReactNative%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h3 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h3><p>  我们谁都不想重复造轮子，我们都希望write once run anywhere，react native 现在给你这个机会<br>  先上图：<br><a id="more"></a><br>  <img src="http://7xslr9.com1.z0.glb.clouddn.com/ReactNativeiOS.png" alt=""><img src="http://7xslr9.com1.z0.glb.clouddn.com/ReactNativeAndroid.png" alt=""></p>
<h3 id="二、简单用例"><a href="#二、简单用例" class="headerlink" title="二、简单用例"></a>二、简单用例</h3><p>  1、简单实现一个历史记录的界面<br>  在这里我就不谈环境部署了，按着官方文档一步一步来就可以了<br>  初始化完项目后，我们可以在主目录里面看到Android和iOS的工程以及JS入口文件index.android.js和index.ios.js<br>  我把这两个文件里面的类容都改为<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(<span class="string">'./App/app'</span>);</div></pre></td></tr></table></figure></p>
<p>  这样我们就直接可以在app.js文件里写代码应用到Android和iOS中了<br>  app.js里的代码如下<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Platform,</div><div class="line">  Component,</div><div class="line">  TouchableOpacity,</div><div class="line">  StyleSheet,</div><div class="line">  Navigator,</div><div class="line">  View,</div><div class="line">  Text</div><div class="line">&#125; from <span class="string">'react-native'</span>;</div><div class="line">import Home from <span class="string">'./home'</span>;</div><div class="line"></div><div class="line">const defaultRoute = &#123;</div><div class="line">  component: Home</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class StartReact extends Component &#123;</div><div class="line">  _renderScene(route, navigator) &#123;</div><div class="line">    <span class="built_in">let</span> Component = route.component;</div><div class="line">    <span class="built_in">return</span> (</div><div class="line">      &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="title">_renderNavBar</span></span>() &#123;</div><div class="line">    const styles = &#123;</div><div class="line">      title: &#123;</div><div class="line">        flex: 1, alignItems: <span class="string">'center'</span>, justifyContent: <span class="string">'center'</span></div><div class="line">      &#125;,</div><div class="line">      button: &#123;</div><div class="line">        flex: 1, width: 50, alignItems: <span class="string">'center'</span>, justifyContent: <span class="string">'center'</span></div><div class="line">      &#125;,</div><div class="line">      buttonText: &#123;</div><div class="line">        fontSize: 18, color: <span class="string">'#FFFFFF'</span>, fontWeight: <span class="string">'400'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var routeMapper = &#123;</div><div class="line">      LeftButton(route, navigator, index, navState) &#123;</div><div class="line">        <span class="keyword">if</span>(index &gt; 0) &#123;</div><div class="line">          <span class="built_in">return</span> (</div><div class="line">            &lt;TouchableOpacity</div><div class="line">              onPress=&#123;() =&gt; navigator.pop()&#125;</div><div class="line">              style=&#123;styles.button&#125;&gt;</div><div class="line">              &lt;Text style=&#123;styles.buttonText&#125;&gt;Back&lt;/Text&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">          );</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">return</span> (</div><div class="line">            &lt;TouchableOpacity</div><div class="line">              onPress=&#123;() =&gt; navigator.pop()&#125;</div><div class="line">              style=&#123;styles.button&#125;&gt;</div><div class="line">              &lt;Text style=&#123;styles.buttonText&#125;&gt;返回&lt;/Text&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">          );</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      RightButton(route, navigator, index, navState) &#123;</div><div class="line">        <span class="keyword">if</span>(index &gt; 0 &amp;&amp; route.rightButton) &#123;</div><div class="line">          <span class="built_in">return</span> (</div><div class="line">            &lt;TouchableOpacity</div><div class="line">              onPress=&#123;() =&gt; navigator.pop()&#125;</div><div class="line">              style=&#123;styles.button&#125;&gt;</div><div class="line">              &lt;Text style=&#123;styles.buttonText&#125;&gt;下一页&lt;/Text&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">          );</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">return</span> (</div><div class="line">            &lt;TouchableOpacity</div><div class="line">              onPress=&#123;() =&gt; navigator.pop()&#125;</div><div class="line">              style=&#123;styles.button&#125;&gt;</div><div class="line">              &lt;Text style=&#123;styles.buttonText&#125;&gt;走你&lt;/Text&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">          );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125;,</div><div class="line">      Title(route, navigator, index, navState) &#123;</div><div class="line">        <span class="built_in">return</span> (</div><div class="line">          &lt;View style=&#123;styles.title&#125;&gt;</div><div class="line">            &lt;Text style=&#123;styles.buttonText&#125;&gt;&#123;route.title ? route.title : <span class="string">'主页'</span>&#125;&lt;/Text&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">        );</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> (</div><div class="line">      &lt;Navigator.NavigationBar</div><div class="line">        style=&#123;&#123;</div><div class="line">          alignItems: <span class="string">'center'</span>,</div><div class="line">          backgroundColor: <span class="string">'#fd9526'</span>,</div><div class="line">          shadowOffset:&#123;</div><div class="line">              width: 1,</div><div class="line">              height: 0.5,</div><div class="line">          &#125;,</div><div class="line">          shadowColor: <span class="string">'#55ACEE'</span>,</div><div class="line">          shadowOpacity: 0.8,</div><div class="line">          &#125;&#125;</div><div class="line">        routeMapper=&#123;routeMapper&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="title">render</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> (</div><div class="line">      &lt;Navigator</div><div class="line">        initialRoute=&#123;defaultRoute&#125;</div><div class="line">        renderScene=&#123;this._renderScene&#125;</div><div class="line">        sceneStyle=&#123;&#123;paddingTop: (Platform.OS === <span class="string">'android'</span> ? 64 : 44)&#125;&#125;</div><div class="line">        navigationBar=&#123;this._renderNavBar()&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: <span class="string">'center'</span>,</div><div class="line">    alignItems: <span class="string">'center'</span>,</div><div class="line">    backgroundColor: <span class="string">'#F5FCFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: <span class="string">'center'</span>,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: <span class="string">'center'</span>,</div><div class="line">    color: <span class="string">'#333333'</span>,</div><div class="line">    marginBottom: 5,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'StartReact'</span>, () =&gt; StartReact);</div></pre></td></tr></table></figure></p>
<p>  当然这里还依赖了home.js，Navigation.js这里就不一一罗列了</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> react native </tag>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[纯代码实现UISplitViewController分屏效果]]></title>
      <url>/2016/05/20/%E7%BA%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0UISplitViewController%E5%88%86%E5%B1%8F%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h3 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h3><p>  UISplitViewController 是 iphone 6s plus,ipad系列常用的控件 在iOS8以上的iPhone中得到支持（ In iOS 8 and later）一个典型的场景：iPhone 6s plus 内置的设置APP; 根据苹果设计指南，UISplitViewController一般作为更控制器来使用即rootViewController（. Split view controllers are normally installed at the root of your app’s window），不能作为navigationController的子控制器。<br>  <a id="more"></a></p>
<h3 id="二、简单用例"><a href="#二、简单用例" class="headerlink" title="二、简单用例"></a>二、简单用例</h3><p>  1、注册为根控制器，为splitViewController指定master-detail控制器<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> masterController: MasterController = MasterController()</div><div class="line">     masterNav.addChildViewController(masterController)</div><div class="line">     <span class="built_in">let</span> detailController = DetailController()</div><div class="line">     detailNav.addChildViewController(detailController)</div><div class="line">     splitViewController.viewControllers = [masterNav,detailNav];</div><div class="line">     preferredDisplayMode = .Automatic</div><div class="line">     window?.rootViewController = SplitController()</div></pre></td></tr></table></figure></p>
<p>  其中，viewControllers[0]为master viewControllers[1]为detail 本例中master为TableViewController<br>  2、cell事件的响应，判断横竖屏，实现spliViewController的转场方法</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> dest = DetailController()</div><div class="line"><span class="keyword">if</span> UIScreen.mainScreen().bounds.width &gt; UIScreen.mainScreen().bounds.height &#123;</div><div class="line">   self.showDetailViewController(dest, sender: names[indexPath.row])</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">   self.showViewController(dest, sender: names[indexPath.row])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  需要提醒一下的是，为了在dest中接收到的sender数据，dest必须实现split view controller的代理方法<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">func splitViewController(splitViewController: UISplitViewController, showDetailViewController vc: UIViewController, sender: AnyObject?) -&gt; Bool &#123;</div><div class="line">  title = <span class="string">"\(sender!)"</span></div><div class="line">  <span class="built_in">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  这样就简单实现了分屏效果</p>
<h1 id="实例代码-SplitViewController"><a href="#实例代码-SplitViewController" class="headerlink" title="实例代码: SplitViewController"></a>实例代码: <a href="https://github.com/CNKCQ/SplitViewController" target="_blank" rel="external">SplitViewController</a></h1>]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> UISplitViewController </tag>
            
            <tag> 分屏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS安全问题之加密解密]]></title>
      <url>/2016/02/05/iOS%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E4%B9%8B%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h3><p>  越来越多的应用和金钱都要打交道，用户隐私安全的保护也变得空前的重要了，互联网金融应用、电商应用支付、网络存储、数据网络传输……都需要对数据进行保护。</p>
  <a id="more"></a>
<h3 id="二、加密解密解决方案"><a href="#二、加密解密解决方案" class="headerlink" title="二、加密解密解决方案"></a>二、加密解密解决方案</h3><p>  既然数据安全如此重要，那么解决思路呢？<br>  1、对数据内容加密（通常在传输过程中）<br>  2、对数据文件进行加密（通常用于本地数据库文件）</p>
<h3 id="三、SQLCipher加密数据库文件"><a href="#三、SQLCipher加密数据库文件" class="headerlink" title="三、SQLCipher加密数据库文件"></a>三、SQLCipher加密数据库文件</h3><p>  SQLCipher是完全开源的，代码可以在github上面找到。<br>  我们可以通过Pod引进sqlcipher依赖<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'FMDB'</span>, <span class="string">'~&gt; 2.6'</span></div><div class="line">pod <span class="string">'SQLCipher'</span>, <span class="string">'~&gt; 3.3.1'</span></div></pre></td></tr></table></figure></p>
<p>  然后，在项目中添加相应的头文件，重写- (BOOL)open 方法：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (BOOL)open &#123;</div><div class="line"> <span class="keyword">if</span> (_db) &#123;</div><div class="line">     <span class="built_in">return</span> YES;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> int err = sqlite3_open([self sqlitePath], &amp;_db );</div><div class="line"> <span class="keyword">if</span>(err != SQLITE_OK) &#123;</div><div class="line">     NSLog(@<span class="string">"error opening!: %d"</span>, err);</div><div class="line">     <span class="built_in">return</span> NO;</div><div class="line"> &#125; <span class="keyword">else</span>&#123;</div><div class="line">     //数据库open后设置加密key</div><div class="line">     [self setKey:@<span class="string">"abc123"</span>];</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">if</span> (_maxBusyRetryTimeInterval &gt; 0.0) &#123;</div><div class="line">     // <span class="built_in">set</span> the handler</div><div class="line">     [self setMaxBusyRetryTimeInterval:_maxBusyRetryTimeInterval];</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="built_in">return</span> YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  好啦，至此，数据库文件加密已经完成！</p>
<h3 id="四、对数据内容加密"><a href="#四、对数据内容加密" class="headerlink" title="四、对数据内容加密"></a>四、对数据内容加密</h3><p>  1、MD5系列不可逆加密<br>  2、DES对称加密<br>  3、AES对称加密<br>  4、RSA非对称加密<br>  5、ECC椭圆形加密<br>  这5种方法加密安全系数从上到下依次递增。</p>
<!--   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> deploy</div></pre></td></tr></table></figure>
<p>  More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-deployer-git --save</div><div class="line">``` </div><div class="line"> </div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="variable">$hexo</span> server</div></pre></td></tr></table></figure>
<p>  <img src="http://7xslr9.com1.z0.glb.clouddn.com/kingcqduanhuo%402x.png" alt="断货">!<br> –&gt;</p>
-->]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RSA </tag>
            
            <tag> AES </tag>
            
            <tag> MD5 </tag>
            
            <tag> SQLCipher </tag>
            
            <tag> 加密解密 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xcode 7 升级问题]]></title>
      <url>/2015/09/29/Xcode%207%20%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>  最近用XCode 7 也有一段时间了，每次IDE升级都会产生一系列的问题，因此，小计一下，希望朋友们在遇到这些问题时能轻松应对。<br>问题一：<br><img src="images/bitcodeq.png" alt=""><br>解决办法：<br><img src="images/bitcodea.jpg" alt="bitcodea"></p>
<p>问题二：<br>iOS模拟器出现一大堆UUID，特别的烦人。以下是解决这个恼人问题的方法，希望能帮到大家：</p>
<ol>
<li>关闭Xcode 和 模拟器；</li>
<li>$ sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService</li>
<li>$ rm -rf ~/Library/Developer/CoreSimulator/Devices</li>
<li>重启Xcode </li>
</ol>
<p>问题就这么愉快的解决了。</p>
<p>顺便向大家推荐 Xcode 下本人使用频率较高的几款插件：</p>
<p>1，alcatraz<br>Package manager for Xcode<br><a href="http://alcatraz.io" target="_blank" rel="external">http://alcatraz.io</a><br><a href="https://github.com/supermarin/Alcatraz" target="_blank" rel="external">https://github.com/supermarin/Alcatraz</a><br>xcode插件管理工具<br>2，VVDocumenter-Xcode<br>3，KSImageNamed-Xcode<br>大家可以用alcatraz搜索自己喜欢的插件</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Xcode </tag>
            
            <tag> BitCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学历是铜牌，能力是银牌，人脉是金牌，思维是王牌]]></title>
      <url>/2015/08/29/%E5%AD%A6%E5%8E%86%E6%98%AF%E9%93%9C%E7%89%8C%EF%BC%8C%E8%83%BD%E5%8A%9B%E6%98%AF%E9%93%B6%E7%89%8C%EF%BC%8C%E4%BA%BA%E8%84%89%E6%98%AF%E9%87%91%E7%89%8C%EF%BC%8C%E6%80%9D%E7%BB%B4%E6%98%AF%E7%8E%8B%E7%89%8C/</url>
      <content type="html"><![CDATA[<p>有人工作，有人上学，大家千万不要错过这篇文章，能看到这篇文章也是一种幸运，真的受益匪浅，对我有很大启迪，这篇文章将会改变你我的一生，真的太好了，希望与有缘人分享，也希望对有缘人有所帮助！看完之后有种“相见恨晚”的感觉，特别激动，希望大家好好的珍藏这篇文章，相信多年以后，再来看这篇文章，一定有不同的感觉。 </p>
<p>   正如”打工皇帝”唐骏说：”我觉得有两种人不要跟别人争利益和价值回报。第一种人就是刚刚进入企业的人，头5年千万不要说你能不能多给我一点儿工资，最重要的是能在企业里学到什么，对发展是不是有利……”<br>   人总是从平坦中获得的教益少，从磨难中获得的教益多；从平坦中获得的教益浅，从磨难中获得的教益深。一个人在年轻时经历磨难，如能正确视之，冲出黑暗，那就是一个值得敬慕的人。最要紧的是先练好内功，毕业后这5年就是练内功的最佳时期，练好内功，才有可能在未来攀得更高。<br>   出路在哪里？出路在于思路！<br>　　其实，没有钱、没有经验、没有阅历、没有社会关系，这些都不可怕。没有钱，可以通过辛勤劳动去赚；没有经验，可以通过实践操作去总结；没有阅历，可以一步一步去积累；没有社会关系，可以一点一点去编织。但是，没有梦想、没有思路才是最可怕的，才让人感到恐惧，很想逃避!<br>　　人必须有一个正确的方向。无论你多么意气风发，无论你是多么足智多谋，无论你花费了多大的心血，如果没有一个明确的方向，就会过得很茫然，渐渐就丧失了斗志，忘却了最初的梦想，就会走上弯路甚至不归路，枉费了自己的聪明才智，误了自己的青春年华。<br>   荷马史诗《奥德赛》中有一句至理名言：”没有比漫无目的地徘徊更令人无法忍受的了。”毕业后这5年里的迷茫，会造成10年后的恐慌，20年后的挣扎，甚至一辈子的平庸。如果不能在毕业这5年尽快冲出困惑、走出迷雾，我们实在是无颜面对10年后、20年后的自己。毕业这5年里，我们既有很多的不确定，也有很多的可能性。<br> <a id="more"></a><br>　　毕业这5年里，我们既有很多的待定，也有很多的决定。<br>　　迷茫与困惑谁都会经历，恐惧与逃避谁都曾经有过，但不要把迷茫与困惑当作可以自我放弃、甘于平庸的借口，更不要成为自怨自艾、祭奠失意的苦酒。生命需要自己去承担，命运更需要自己去把握。在毕业这5年里，越早找到方向，越早走出困惑，就越容易在人生道路上取得成就、创造精彩。无头苍蝇找不到方向，才会四处碰壁；一个人找不到出路，才会迷茫、恐惧。<br>   生活中，面对困境，我们常常会有走投无路的感觉。不要气馁，坚持下去，要相信年轻的人生没有绝路，困境在前方，希望在拐角。只要我们有了正确的思路，就一定能少走弯路，找到出路！<br>   成功的人不是赢在起点，而是赢在转折点。<br>   不少刚刚毕业的年轻人，总是奢望马上就能找到自己理想中的工作。然而，很多好工作是无法等来的，你必须选择一份工作作为历练。职业旅程中的第一份工作，无疑是踏入社会这所大学的起点。也许你找了一份差强人意的工作，那么从这里出发，好好地沉淀自己，从这份工作中汲取到有价值的营养，厚积薄发。千里之行，始于足下，只要出发，就有希望到达终点。<br>   起点可以相同，但是选择了不同的拐点，终点就会大大不同！<br>   毕业这几年，我们的生活、感情、职业等都存在很多不确定的因素，未来也充满了各种可能。这个时候，必须学会选择，懂得放弃，给自己一个明确的定位，使自己稳定下来。如果你不主动定位，就会被别人和社会”定型”！<br>　　可以这么说：一个人在毕业这5年培养起来的行为习惯，将决定他一生的高度。我们能否成功，在某种程度上取决于自己对自己的评价，这就是定位。你给自己定位是什么，你就是什么。定位能决定人生，定位能改变命运。丑小鸭变成白天鹅，只要一双翅膀；灰姑娘变成美公主，只要一双水晶鞋。<br>   人的命，三分天注定，七分靠打拼，有梦就”会红”，爱拼才会赢。只要不把自己束缚在心灵的牢笼里，谁也束缚不了你去展翅高飞。<br>   现实情况远非他们所想的那样。于是，当优越感逐渐转为失落感甚至挫败感时，当由坚信自己是一块”金子”到怀疑自己是一粒”沙子”时，愤怒、迷茫、自卑就开始与日俱增。<br>   其实，应该仔细掂量一下自己，你是否真是金子？是真金，手中要有绝活，才能上要有过人之处才行。一句话：真金是要靠实力来证明的，只有先把自己的本领修炼好了，才有资格考虑伯乐的事情<br>   每颗珍珠原本都是一粒沙子，但并不是每一粒沙子都能成为一颗珍珠。<br>   想要卓尔不群，就要有鹤立鸡群的资本。忍受不了打击和挫折，承受不住忽视和平淡，就很难达到辉煌。年轻人要想让自己得到重用，取得成功，就必须把自己从一粒沙子变成一颗价值连城的珍珠。<br>   天有下雨与日出，人生高峰与低谷。<br>   莫为浮云遮望眼，风物长宜放眼量。<br>   只要拂去阴霾，就能亮出朗朗晴空。如果你在工作上有些不如意，要相信自己不会一直处于人生的低谷期，总有一天能冲破重重云层。告诉自己：我并没有失败，只是暂时没有成功！只要在内心点亮一盏希望之灯，一定能驱散黑暗中的阴霾，迎来光明。<br>   的确，论资历，他们是不折不扣的职场菜鸟，业务涉及不深，人脉一穷二白，在工作中经常碰壁。他们的压力并不一定都像千钧大石，而是像大雨来临前的天色，灰色低沉，明明有空间，却被灰色填满每个缝隙，只能等待大雨倾盆之后的晴空。<br>　　“起得比鸡早，睡得比狗晚，干得比驴多，吃得比猪差。”这是很多刚刚毕业的人喜欢用来调侃自己生活状态的话。虽然有点儿夸张，但是，他们中的很多人的确一直都被灰色心情所笼罩–心里永远是多云转阴。记得有位哲人曾说：”我们的痛苦不是问题本身带来的，而是我们对这些问题的看法产生的。”换个角度看人生，是一种突破、一种解脱、一种超越、一种高层次的淡泊与宁静，从而获得自由自在的快乐。<br>   一位哲人说：”人生就是一连串的抉择，每个人的前途与命运，完全把握在自己手中，只要努力，终会有成。”就业也好，择业也罢，创业亦如此，只要奋发努力，都会成功。你是不是准备把生命的承诺全部都交给别人？<br>　　毕业后这5年，是改变自己命运的黄金时期。在最能决定自己命运时，如果还不把握，那你还要等到什么时候呢？我的人生我做主，命运由己不由人。<br>　　不要活在别人的嘴里，不要活在别人的眼里，而是把命运握在自己手里。<br>　　别说你没有背景，自己就是最大的背景。美国作家杰克·凯鲁亚克说过一句话：”我还年轻，我渴望上路。”在人生的旅途中，我们永远都是年轻人，每天都应该满怀渴望。每个人的潜能都是无限的，关键是要发现自己的潜能和正确认识自己的才能，并找到一个能充分发挥潜能的舞台，而不能只为舞台的不合适感到不快。要客观公正地看待自己的能力，结合自己的实际情况和爱好冷静选择，尽可能到最需要自己、最适合自己的地方。<br>　    在人力资源管理界，特别流行一个说法，即”骑马，牵牛，赶猪，打狗”理论：人品很好，能力又很强的，是千里马，我们要骑着他；人品很好但能力普通的，是老黄牛，我们要牵着他；人品、能力皆普通的，就是”猪”，我们要赶走他；人品很差能力很强的，那是”狗”，我们要打击他。<br>   我想，刚刚毕业几年的你，一样胸怀大志，一样想成为一匹被人赏识、驰骋沙场的千里马吧？那么，就好好沉淀下来。低就一层不等于低人一等，今日的俯低是为了明天的高就。所谓生命的价值，就是我们的存在对别人有价值。能被人利用是一件好事，无人问津才是真正的悲哀！<br>   能干工作、干好工作是职场生存的基本保障。<br>   任何人做工作的前提条件都是他的能力能够胜任这项工作。能干是合格员工最基本的标准，肯干则是一种态度。一个职位有很多人都能胜任，都有干好这份工作的基本能力，然而，能否把工作做得更好一些，就要看是否具有踏实肯干、苦于钻研的工作态度了。<br>   在能干的基础上踏实肯干。<br>   工作中，活干得比别人多，你觉得吃亏；钱拿得比别人少，你觉得吃亏；经常加班加点，你觉得吃亏……其实，没必要这样计较，吃亏不是灾难，不是失败，吃亏也是一种生活哲学。现在吃点儿小亏，为成功铺就道路，也许在未来的某个时刻，你的大福突然就来了。<br>   能吃亏是做人的一种境界，是处世的一种睿智。<br>   在工作中并不是多做事或多帮别人干点儿活就是吃亏。如果领导让你加加班、赶赶任务，别以为自己吃了大亏，反而应该感到庆幸，因为领导只叫了你，而没叫其他人，说明他信任你、赏识你。吃亏是一种贡献，你贡献得越多，得到的回报也就越多。乐于加班，就是这样的一种吃亏。<br>   舍得舍得，有舍才有得；学会在适当时吃些亏的人绝对不是弱智，而是大智。<br>　　给别人留余地就是给自己留余地，予人方便就是予己方便，善待别人就是善待自己。<br>　　傻人有傻福，因为傻人没有心计。和这样的人在一起，身心放松，没有太多警惕，就能相互靠近。傻在很多时候意味着执着和忠贞，也意味着宽厚和诚实，让人不知不觉站到他一边。傻人无意中得到的，比聪明人费尽心机得到的还多。毕业这几年，你的天空中只飘着几片雪花，这样你就满足了吗？成功需要坚持与积累，与其专注于搜集雪花，不如省下力气去滚雪球。巴菲特说：”人生就像滚雪球，最重要的是发现很湿的雪和很长的坡。”让自己沉淀下来，学着发现”很湿的雪”，努力寻找”很长的坡”。记住：散落的雪花会很快融化，化为乌有，只有雪球才更实在，才能长久。<br>在毕业这几年里，你要是能做到比别人多付出一分努力，就意味着比别人多积累一分资本，就比别人多一次成功的机会。<br>    什么是职业化呢？职业化就是工作状态的标准化、规范化、制度化，即在合适的时间、合适的地点用合适的方式说合适的话、做合适的事，使知识、技能、观念、思维、态度、心理等符合职业规范和标准。”在每个行业里，都有很多出色的人才，他们之所以能存在，是因为比别人更努力、更智慧、更成熟。但是，最重要的是，他们比一般人更加职业化！这就是为什么我现在能当你老板的原因。一个人仅仅专业化是不够的，只有职业化的人才能飞在别人前面，让人难以超越！”不要以为我们现在已经生存得很安稳了。对于毕业5年的人来讲，一定要认清即将面临的五大挑战。 </p>
<p>一、赡养父母。<br>二、结婚生子。<br>三、升职加薪。<br>四、工作压力。<br>五、生活质量。<br>    有的人为生存而雀跃，目光总是停在身后，三天打鱼两天晒网，有始无终。<br>　  有的人为发展而奋斗，目光总是盯在正前方，每天进步一点点，坚持不懈。<br>　　毕业这几年，不能没有追求和探索，不能没有理想和目标。人生如逆水行舟，不进则退。甘于现状的生活就是不再前行的船，再也无法追上时代前进的步伐。一定要抓紧每一秒钟的时间来学习，要明白学习不是学生的专利。小聪明的人最得意的是：自己做过什么？大智慧的人最渴望的是：自己还要做什么？<br>　　小聪明是战术，大智慧是战略；小聪明看到的是芝麻，大智慧看到的是西瓜。<br>　　在这个世界上，既有大人物，也有小角色，大人物有大人物的活法，小人物有小人物的潇洒，每个人都有自己的生活方式，谁也勉强不了谁。但是，小聪明只能有小成绩和小视野，大智慧才能有大成就和大境界。小企业看老板，中企业看制度，大企业看文化。<br>    小公司与大企业都有生存之道，没有好坏之分，但对一个人不同阶段的影响会不同。<br>　　小公司肯定想要发展为大企业，这是一种目标，年轻人也要给自己的职业生涯制定目标。毕业几年的你，是否经常会怯场或者是感到没有底气？居安思危绝对不是危言耸听！此刻打盹，你将做梦；此刻学习，你将圆梦。在竞争激烈的人生战场上，打盹的都是输家！<br>   每个人在年轻的时候似乎都豪情万丈，什么都不怕，可是随着年龄的增长，每天想着房子、工作、养家糊口这些俗事儿，再也没有年轻时那种敢于”上天探星、下海捞月”的勇气了。是我们改变了生活，还是生活改变了我们？我们的思想越来越复杂，因为有了越来越多的舍不得、越来越多的顾虑，我们总是在徘徊、总是在犹豫。毕业开始一两年，生活的重担会压得我们喘不过气来，挫折和障碍堵住四面八方的通口，我们往往在压迫得自己发挥出潜能后，才能杀出重围，找到出路。可是两三年后，身上的重担开始减轻，工作开始一帆风顺，我们就松懈了下来，渐渐忘记了潜在的危险。直到有一天危机突然降临，我们在手足无措中被击败……毕业这几年，仍然处于危险期，一定要有居安思危的意识，好好打拼，这样才能有一个真正的安全人生！<br>    生于忧患，死于安乐。如果你想跨越自己目前的成就，就不能画地自限，而是要勇于接受挑战。对畏畏缩缩的人来说，真正的危险正在于不敢冒险！<br>    年轻人在社会的重压下，适应能力已变得越来越强，只是他们不自觉地习惯被环境推着走。他们不敢冒险，怕给自己带来终身的遗憾，于是告慰自己：”我对得起自己、对得起家人，因为我已竭尽全力。”其实，人只有不断挑战和突破才能逐渐成长。长期固守于已有的安全感中，就会像温水里的青蛙一样，最终失去跳跃的本能。<br>    经历了这几年社会生活，你应该明白：这个世界上有富也有贫，有阴也有亮，有丑也有美，到底看到什么，取决于自己是积极还是消极。在年轻时学会勤勉地工作，用一种光明的思维对待生活，那么，只要张开手掌，你就会发现，里面有一片灿烂的人生。<br>    把感恩刻在石头上，深深地感谢别人帮助过你，永远铭记，这是人生应有的一种境界；把仇恨写在沙滩上，淡淡忘掉别人伤害过你，学会宽容，让所有的怨恨随着潮水一去不复返，这也是一种人生境界。<br>    学会倒出水，才能装下更多的水。从毕业那天开始，学会把每天都当成一个新的起点，每一次工作都从零开始。如果你懂得把”归零”当成一种生活的常态，当成一种优秀的延续，当成一种时刻要做的事情，那么，经过短短几年，你就可以完成自己职业生涯的正确规划与全面超越。<br>　　在职业起步的短短道路上，想要得到更好、更快、更有益的成长，就必须以归零思维来面对这个世界。不要以大学里的清高来标榜自己，不要觉得自己特别优秀，而是要把自己的姿态放下，把自己的身架放低，让自己沉淀下来，抱着学习的态度去适应环境、接受挑战。放下”身段”才能提高身价，暂时的俯低终会促成未来的高就。<br>　　年轻人从校园或者从一个环境进入一个新环境，就要勇于将原来环境里熟悉、习惯、喜欢的东西放下，然后从零开始。我们想在职场上获得成功，首先就要培养适应力。从自然人转化为单位人是融入职场的基本条件。一个人起点低并不可怕，怕的是境界低。越计较自我，便越没有发展前景；相反，越是主动付出，那么他就越会快速发展。很多今天取得一定成就的人，在职业生涯的初期都是从零开始，把自己沉淀再沉淀、倒空再倒空、归零再归零，正因为这样，他们的人生才一路高歌，一路飞扬。<br>　　在毕业这几年里，我们要让过去归零，才不会成为职场上那只背着重壳爬行的蜗牛，才能像天空中的鸟儿那样轻盈地飞翔。请好好品味一下杰克·韦尔奇说过的一句话：”纠正自己的行为，认清自己，从零开始，你将重新走上职场坦途。”　吐故才能纳新，心静才能身凉，有舍才能有得，杯空才能水满，放下才能超越。<br>    归零思维五大表现：心中无我，眼中无钱，念中无他，朝中无人，学无止境。<br>    年轻人难免带着几分傲气，认为自己无所不能、所向披靡，其实不然，初入职场的新人还是个”婴儿”，正处在从爬到走的成长阶段。在毕业这几年里，一定要让自己逐步培养起学徒思维、海绵思维、空杯思维，具有这样思维的人心灵总是敞开的，能随时接受启示和一切能激发灵感的东西，他们时刻都能感受到成功女神的召唤。</p>
]]></content>
      
        
        <tags>
            
            <tag> 励志 </tag>
            
            <tag> 收录 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift：如何动态初始化一个类]]></title>
      <url>/2015/04/10/Swift%E2%80%94%E2%80%94%E5%8A%A8%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h3 id="一、产品需求"><a href="#一、产品需求" class="headerlink" title="一、产品需求"></a>一、产品需求</h3><p>  现在市面上的APP有很多都有这样一个需求，那就是tabBarItem的动态配置，也就是如果节假日呀或者什么特殊日子呀tabBarItem的icon和title就有后台配置一下就可以改变了。<br>  <a id="more"></a></p>
<h3 id="二、命名空间"><a href="#二、命名空间" class="headerlink" title="二、命名空间"></a>二、命名空间</h3><p>  有一定经验的人都知道，要实现上面的需求，iOS端必须要动态创建类，在oc中这个好办：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class cls = NSClassFromString(@<span class="string">"NewsViewController"</span>);</div><div class="line">[self.navigationController pushViewController:cls.new animated:YES];</div></pre></td></tr></table></figure></p>
<p>  但是在Swift中就没有这么简单了，总所周知oc是没有命名空间的，而Swift有命名空间，在 swift 中，类名是包含命名空间的，命名空间默认是项目名称，同一个命名空间全局共享，如果新建项目时，项目名称中包含有中文，可以按照下图修改：<br>  <img src="http://7xslr9.com1.z0.glb.clouddn.com/2015-04-10%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.jpg" alt="ns"><br>  命名空间我们可以从info.plist配置文件里面或取:<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> namespace = NSBundle.mainBundle().infoDictionary![<span class="string">"CFBundleExecutable"</span>] as! String</div></pre></td></tr></table></figure></p>
<p>  在Swift中我们就可以这样动态的初始化一个类了：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> clsName = namespace + <span class="string">"."</span> + <span class="string">"NewsViewController"</span></div><div class="line"><span class="built_in">let</span> cls: AnyClass = NSClassFromString(clsName)!</div><div class="line"><span class="built_in">let</span> vc = cls.alloc() as! UITableViewController</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 动态加载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一步一步搭建Hexo博客]]></title>
      <url>/2015/02/20/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="个人博客快速入门"><a href="#个人博客快速入门" class="headerlink" title="个人博客快速入门"></a>个人博客快速入门</h2><h3 id="一、生成个人主页"><a href="#一、生成个人主页" class="headerlink" title="一、生成个人主页"></a>一、生成个人主页</h3><p>  注册一个github账号，创建一个以你用户名为前缀的仓库，例如：KingCQ.github.com,点击仓库的设置（Settings）进入里面生成 GitHubPages 成功完成相应操作后你会看到 Your site is published at <a href="http://kingcq.github.io" target="_blank" rel="external">http://kingcq.github.io</a>. 打开这个网页，这就是你的pages页面了</p>
  <a id="more"></a>
<h3 id="二、添加SSH-Keys"><a href="#二、添加SSH-Keys" class="headerlink" title="二、添加SSH Keys"></a>二、添加SSH Keys</h3><p>  生成密钥：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ssh</span>-keygen -t rsa -C <span class="string">"wangchengqvan@hotmail.com"</span></div></pre></td></tr></table></figure></p>
<p>  上述命令若执行成功，会在H:\git\myssh目录下生成两个文件id_rsa和id_rsa.pub，最后两步：<br>  用文本编辑器打开ssh.pub文件，拷贝其中的内容，将其添加到Add SSH Key<br>  好，我们来验证一下：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ssh</span> -T git@github.com</div></pre></td></tr></table></figure></p>
<p>  如果出现Permission denied (publickey).（addkey哪一步可能出现了问题）<br>  仔细检查，可能是密钥失效或者拼写错误，重新来一次，成功后会有如下提示：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi username! You<span class="string">'ve successfully authenticated...</span></div></pre></td></tr></table></figure></p>
<h3 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h3><p>  假设你已经安装好了npm，如果没有请自行Google<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install -g hexo</div></pre></td></tr></table></figure></p>
<p>  然后，执行init命令初始化hexo到你指定的目录：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div></pre></td></tr></table></figure></p>
<p>  好啦，至此，全部安装工作已经完成！</p>
<h3 id="四、生成静态网页"><a href="#四、生成静态网页" class="headerlink" title="四、生成静态网页"></a>四、生成静态网页</h3><p>  cd 到你的init目录，执行如下命令，生成静态页面至hexo\public\目录。<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> generate</div></pre></td></tr></table></figure></p>
<p>  命令必须在init目录下执行，否则不成功，但是也不报错<br>  把生成的网页部署到服务器,执行命令<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> deploy</div></pre></td></tr></table></figure></p>
<p>  More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a><br>  在执行 hexo deploy 后,如果出现 error deployer not found:github 的错误</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-deployer-git --save</div><div class="line">``` </div><div class="line">改了之后执行，然后再部署试试</div><div class="line">本地启动</div><div class="line">执行如下命令，启动本地服务，进行文章预览调试。</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="variable">$hexo</span> server</div></pre></td></tr></table></figure>
<p>  用浏览器打开(<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>)<br>  你就可以欣赏到hexo个人主页的效果了。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
